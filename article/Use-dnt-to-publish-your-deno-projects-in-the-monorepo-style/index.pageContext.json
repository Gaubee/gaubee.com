{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"Use-dnt-to-publish-your-deno-projects-in-the-monorepo-style"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"使用 dnt 将你的 deno 项目发布成 monorepo 风格","date":"!Date:2024-04-27T04:40:46.724Z","updated":"!Date:2024-04-27T04:40:46.724Z","id":"Use-dnt-to-publish-your-deno-projects-in-the-monorepo-style","createdAt":"!Date:2024-04-27T04:40:46.724Z","updatedAt":"!Date:2024-04-27T04:40:46.724Z","tags":[]},"htmlContent":"<h2>使用 dnt 将你的 deno 项目发布成 monorepo 风格</h2>\n<blockquote>\n<p>在提供理论指导之前，我们先看具体的实践如何做到，完成后，我再说明这种项目管理方案的优势在哪里。</p>\n</blockquote>\n<h3>工具</h3>\n<ol>\n<li><a href=\"https://deno.com/\" target=\"_blank\">deno</a></li>\n<li><a href=\"https://pnpm.io/installation\" target=\"_blank\">pnpm</a></li>\n</ol>\n<h3>准备工作</h3>\n<ol>\n<li>\n<p>创建你的项目：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">deno</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> init</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> dnt-mono</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"># cd dnt-mono</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"># code . # open in ide</span></span></code></pre>\n</li>\n<li>\n<p>初始化 git 仓库</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">git</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> init</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"npm\\nnode_modules\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> .gitignore</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # ignore the npm folder</span></span></code></pre>\n</li>\n<li>\n<p>初始化 package.json，以及一些 npm/pnpm 通常所需的文件</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">npm</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> init</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --yes</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --private</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # create a package.json file</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"MIT\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> LICENSE</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"# Hello Dnt ❤️ Monorepo\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> README.md</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"packages:\\n  - </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">npm/*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> pnpm-workspace.yaml</span></span></code></pre>\n</li>\n<li>\n<p>准备 dnt 脚本</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">deno</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> add</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> @deno/dnt</span></span></code></pre>\n<p>参考 <a href=\"https://github.com/denoland/dnt?tab=readme-ov-file#setup\" target=\"_blank\">Setup</a>，因为我们需要构建多个 npm 包，所以创建 <code>scripts/npmBuilder.ts</code> 文件：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { build, BuildOptions, emptyDir } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"@deno/dnt\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fs </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"node:fs\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"node:path\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { fileURLToPath } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"node:url\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> rootDir</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">meta</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"../\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rootResolve</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">path</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fileURLToPath</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> URL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(path, rootDir));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">export</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> npmBuilder</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> async</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">config</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  packageDir</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  version</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  importMap</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  options</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Partial</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">BuildOptions</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">packageDir</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">version</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">importMap</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">options</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> config;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> packageResolve</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">path</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    fileURLToPath</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> URL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(path, packageDir));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> packageJson</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> JSON</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">parse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    fs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">readFileSync</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">packageResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./package.json\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">), </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"utf-8\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // remove some field which dnt will create. if you known how dnt work, you can keep them.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  delete</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> packageJson.main;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  delete</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> packageJson.module;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  delete</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> packageJson.exports;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">`</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">start dnt: ${</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">packageJson</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">.</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">name</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">}`</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> npmDir</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rootResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">`./npm/${</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">packageJson</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">.</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">name</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">split</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"/\"</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">).</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pop</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">()</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">}`</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> npmResolve</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> path.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(npmDir, p);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> emptyDir</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(npmDir);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (version) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Object.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">assign</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(packageJson, { version: version });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> build</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    entryPoints: [{ name: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\".\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, path: </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">packageResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./index.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) }],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    outDir: npmDir,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    packageManager: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"pnpm\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    shims: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      deno: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // you should open it in actual</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    test: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    importMap: importMap,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    package: packageJson,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // custom by yourself</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    compilerOptions: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      lib: [</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"DOM\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"ES2022\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      target: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"ES2022\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      emitDecoratorMetadata: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    postBuild</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      // steps to run after building and before running the tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      Deno.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">copyFileSync</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">rootResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./LICENSE\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">), </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">npmResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./LICENSE\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      Deno.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">copyFileSync</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">        packageResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./README.md\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">        npmResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./README.md\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    ...</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">options,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span></code></pre>\n</li>\n</ol>\n<h3>主要步骤</h3>\n<ol>\n<li>\n<p>创建两个子文件夹，加入一些项目文件</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"># start from root</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">mkdir</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> packages/module-a</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> packages/module-a</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"export const a = 1;\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> index.ts</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"# @dnt-mono/module-a\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> README.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">npm</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> init</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --scope</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> @dnt-mono</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --yes</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # name : @dnt-mono/module-a</span></span></code></pre>\n<p>同样的步骤，创建 <code>module-b</code> 文件夹</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"># start from root</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">mkdir</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> packages/module-b</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> packages/module-b</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"import { a } from </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">@dnt-mono/module-a</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">;\\nexport const b = a + 1;\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> index.ts</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"# @dnt-mono/module-b\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ></span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> README.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">npm</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> init</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --scope</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> @dnt-mono</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --yes</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # name : @dnt-mono/module-b</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> add</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> @dnt-mono/module-a</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --workspace</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # add module-a as dependencie</span></span></code></pre>\n</li>\n<li>\n<p>在这个事例中， <code>module-b</code> 依赖了 <code>module-a</code>，同时我们在代码中使用了 <code>@dnt-mono/module-a</code> 这个 specifier，所以我们为了让 deno 的语言服务器正确工作，还需要做一些配置。在 <code>deno.json</code> 的 <code>imports</code> 字段中加入这些配置：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-jsonc\"><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"@dnt-mono/module-a\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-a/index.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// in imports</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"@dnt-mono/module-b\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-b/index.ts\"</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // in imports</span></span></code></pre>\n</li>\n<li>\n<p>接着，我们创建构建脚本和配置文件</p>\n<ol>\n<li>\n<p><code>scripts/build_npm.ts</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { npmBuilder } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"./npmBuilder.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> version</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Deno.args[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">await</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> npmBuilder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  packageDir: </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">meta</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"../packages/module-a/\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  importMap: </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">meta</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./import_map.npm.json\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  version,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">await</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> npmBuilder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  packageDir: </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">meta</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"../packages/module-b/\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  importMap: </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">meta</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./import_map.npm.json\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  version,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">});</span></span></code></pre>\n</li>\n<li>\n<p><code>scripts/import_map.npm.json</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-json\"><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  \"imports\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-a\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"npm:@dnt-mono/module-a\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-b\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"npm:@dnt-mono/module-b\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n</li>\n</ol>\n</li>\n<li>\n<p>然后，在你的 <code>deno.json</code> 中配置 build 指令：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-jsonc\"><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"build\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"deno run -A ./scripts/build_npm.ts\"</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // in tasks</span></span></code></pre>\n</li>\n<li>\n<p>最后，尝试执行 build 指令，构建出 npm 目录</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">deno</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> task</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> build</span></span></code></pre>\n<p>这时候，你可以看到 npm 目录下输出了 module-a 和 module-b 两个 npm 包文件夹。\n现在你可以尝试发布这些 npm 包了：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> publish</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> -r</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --no-git-checks</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> --dry-run</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> # you should remove --dry-run actual</span></span></code></pre>\n</li>\n</ol>\n<h3>工作原理</h3>\n<ol>\n<li>我们使用 deno 作为语言服务器，它很强大，很多体验经过定制化开发，已经超越 tsc 本身。</li>\n<li>所以 package.json 在这里只是一个“模板文件”，而不是配置文件。在开发中，真正生效的配置文件只有 deno.json</li>\n<li>因此，pnpm 在这里是一个面向 dnt 最终编译产出的工具，也就是只服务于 <code>npm/*</code> 的目录。这也是为什么 <code>pnpm-workspaces.yaml</code> 的配置是这样的</li>\n<li>dnt 中使用的 <code>import_map.npm.json</code> 很重要，我们不能直接使用 <code>deno.json</code> 作为 <code>importMap</code>，因为<code>deno.json</code>配置给 deno 语言服务器，而 <code>import_map.npm.json</code> 是配置给 dnt/pnpm 使用的。在复杂的项目中，建议你用脚本自动生成并管理它。</li>\n</ol>\n<h3>进阶技巧</h3>\n<p>在 deno 的开发中，我们的理念是面向文件而不是面向模块，因此如果有需要，你需要增加这样的配置在<code>deno.json</code>中：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-jsonc\"><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  \"imports\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-a\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-a/index.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-a/\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-a/src/\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-b\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-b/index.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    \"@dnt-mono/module-b/\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./packages/module-b/src/\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>我习惯将除了 <code>index.ts</code> 意外的文件放到 <code>src</code> 目录下，这会更加符合 node 项目的风格。</p>\n<blockquote>\n<p>但切记，不要把 index.ts 文件也挪到 <code>src</code> 目录下，否则会引发异常 <a href=\"https://github.com/denoland/dnt/issues/249\" target=\"_blank\">#249</a></p>\n</blockquote>\n<p>然后，就是 dnt 的配置，你需要遍历你所有的文件，并将它配置到 entryPoints 中：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">build</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  entryPoints: [</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // default entry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    { name: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\".\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, path: </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">packageResolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./index.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // src files</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    ALL_SRC_TS_FILES</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">map</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">name</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      name: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">`./${</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">name</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">}`</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      path: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">`./src/${</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">name</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">}`</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    })),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">});</span></span></code></pre>\n<p>现在，你就可以写这样的代码了：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { xxx } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"@dnt-mono/module-a/xxx.ts\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span></code></pre>\n<h3>注意事项</h3>\n<ol>\n<li>规划好你的项目结构，避免形成循环依赖。如果有需要，你需要自己配置 peerDependencies</li>\n<li>不要在某个模块中做自引入。\n<blockquote>\n<p>语言服务器并不理解你最终要发布 npm 的意图，所以即便 deno 能正确工作，但你的目的是让 node 也能工作。</p>\n</blockquote>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">import</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { a } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">from</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"@dnt-mono/module-a\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// don't import module-a in module-a</span></span></code></pre>\n在正式的项目中，建议编写 lint 规则来避免这种错误的发生</li>\n</ol>\n<h3>优势</h3>\n","markdownContent":"\n## 使用 dnt 将你的 deno 项目发布成 monorepo 风格\n\n> 在提供理论指导之前，我们先看具体的实践如何做到，完成后，我再说明这种项目管理方案的优势在哪里。\n\n### 工具\n\n1. [deno](https://deno.com/)\n2. [pnpm](https://pnpm.io/installation)\n\n### 准备工作\n\n1. 创建你的项目：\n   ```shell\n   deno init dnt-mono\n   # cd dnt-mono\n   # code . # open in ide\n   ```\n1. 初始化 git 仓库\n   ```shell\n   git init\n   echo \"npm\\nnode_modules\" > .gitignore # ignore the npm folder\n   ```\n1. 初始化 package.json，以及一些 npm/pnpm 通常所需的文件\n   ```shell\n   npm init --yes --private # create a package.json file\n   echo \"MIT\" > LICENSE\n   echo \"# Hello Dnt ❤️ Monorepo\" > README.md\n   echo \"packages:\\n  - \\\"npm/*\\\"\" > pnpm-workspace.yaml\n   ```\n1. 准备 dnt 脚本\n\n   ```shell\n   deno add @deno/dnt\n   ```\n\n   参考 [Setup](https://github.com/denoland/dnt?tab=readme-ov-file#setup)，因为我们需要构建多个 npm 包，所以创建 `scripts/npmBuilder.ts` 文件：\n\n   ```ts\n   import { build, BuildOptions, emptyDir } from \"@deno/dnt\";\n   import fs from \"node:fs\";\n   import path from \"node:path\";\n   import { fileURLToPath } from \"node:url\";\n\n   const rootDir = import.meta.resolve(\"../\");\n   const rootResolve = (path: string) => fileURLToPath(new URL(path, rootDir));\n   export const npmBuilder = async (config: {\n     packageDir: string;\n     version?: string;\n     importMap?: string;\n     options?: Partial<BuildOptions>;\n   }) => {\n     const { packageDir, version, importMap, options } = config;\n     const packageResolve = (path: string) =>\n       fileURLToPath(new URL(path, packageDir));\n     const packageJson = JSON.parse(\n       fs.readFileSync(packageResolve(\"./package.json\"), \"utf-8\")\n     );\n     // remove some field which dnt will create. if you known how dnt work, you can keep them.\n     delete packageJson.main;\n     delete packageJson.module;\n     delete packageJson.exports;\n\n     console.log(`\\nstart dnt: ${packageJson.name}`);\n\n     const npmDir = rootResolve(`./npm/${packageJson.name.split(\"/\").pop()}`);\n     const npmResolve = (p: string) => path.resolve(npmDir, p);\n\n     await emptyDir(npmDir);\n\n     if (version) {\n       Object.assign(packageJson, { version: version });\n     }\n\n     await build({\n       entryPoints: [{ name: \".\", path: packageResolve(\"./index.ts\") }],\n       outDir: npmDir,\n       packageManager: \"pnpm\",\n       shims: {\n         deno: true,\n       },\n       // you should open it in actual\n       test: false,\n       importMap: importMap,\n       package: packageJson,\n       // custom by yourself\n       compilerOptions: {\n         lib: [\"DOM\", \"ES2022\"],\n         target: \"ES2022\",\n         emitDecoratorMetadata: true,\n       },\n       postBuild() {\n         // steps to run after building and before running the tests\n         Deno.copyFileSync(rootResolve(\"./LICENSE\"), npmResolve(\"./LICENSE\"));\n         Deno.copyFileSync(\n           packageResolve(\"./README.md\"),\n           npmResolve(\"./README.md\")\n         );\n       },\n       ...options,\n     });\n   };\n   ```\n\n### 主要步骤\n\n1. 创建两个子文件夹，加入一些项目文件\n\n   ```shell\n   # start from root\n   mkdir packages/module-a\n   cd packages/module-a\n   echo \"export const a = 1;\" > index.ts\n   echo \"# @dnt-mono/module-a\" > README.md\n   npm init --scope @dnt-mono --yes # name : @dnt-mono/module-a\n   ```\n\n   同样的步骤，创建 `module-b` 文件夹\n\n   ```shell\n   # start from root\n   mkdir packages/module-b\n   cd packages/module-b\n   echo \"import { a } from \\\"@dnt-mono/module-a\\\";\\nexport const b = a + 1;\" > index.ts\n   echo \"# @dnt-mono/module-b\" > README.md\n   npm init --scope @dnt-mono --yes # name : @dnt-mono/module-b\n\n   pnpm add @dnt-mono/module-a --workspace # add module-a as dependencie\n   ```\n\n1. 在这个事例中， `module-b` 依赖了 `module-a`，同时我们在代码中使用了 `@dnt-mono/module-a` 这个 specifier，所以我们为了让 deno 的语言服务器正确工作，还需要做一些配置。在 `deno.json` 的 `imports` 字段中加入这些配置：\n\n   ```jsonc\n    \"@dnt-mono/module-a\": \"./packages/module-a/index.ts\", // in imports\n    \"@dnt-mono/module-b\": \"./packages/module-b/index.ts\" // in imports\n   ```\n\n1. 接着，我们创建构建脚本和配置文件\n\n   1. `scripts/build_npm.ts`\n\n      ```ts\n      import { npmBuilder } from \"./npmBuilder.ts\";\n\n      const version = Deno.args[0];\n      await npmBuilder({\n        packageDir: import.meta.resolve(\"../packages/module-a/\"),\n        importMap: import.meta.resolve(\"./import_map.npm.json\"),\n        version,\n      });\n      await npmBuilder({\n        packageDir: import.meta.resolve(\"../packages/module-b/\"),\n        importMap: import.meta.resolve(\"./import_map.npm.json\"),\n        version,\n      });\n      ```\n\n   1. `scripts/import_map.npm.json`\n\n      ```json\n      {\n        \"imports\": {\n          \"@dnt-mono/module-a\": \"npm:@dnt-mono/module-a\",\n          \"@dnt-mono/module-b\": \"npm:@dnt-mono/module-b\"\n        }\n      }\n      ```\n\n1. 然后，在你的 `deno.json` 中配置 build 指令：\n\n   ```jsonc\n   \"build\": \"deno run -A ./scripts/build_npm.ts\" // in tasks\n   ```\n\n1. 最后，尝试执行 build 指令，构建出 npm 目录\n   ```shell\n   deno task build\n   ```\n   这时候，你可以看到 npm 目录下输出了 module-a 和 module-b 两个 npm 包文件夹。\n   现在你可以尝试发布这些 npm 包了：\n   ```shell\n   pnpm publish -r --no-git-checks --dry-run # you should remove --dry-run actual\n   ```\n\n### 工作原理\n\n1. 我们使用 deno 作为语言服务器，它很强大，很多体验经过定制化开发，已经超越 tsc 本身。\n1. 所以 package.json 在这里只是一个“模板文件”，而不是配置文件。在开发中，真正生效的配置文件只有 deno.json\n1. 因此，pnpm 在这里是一个面向 dnt 最终编译产出的工具，也就是只服务于 `npm/*` 的目录。这也是为什么 `pnpm-workspaces.yaml` 的配置是这样的\n1. dnt 中使用的 `import_map.npm.json` 很重要，我们不能直接使用 `deno.json` 作为 `importMap`，因为`deno.json`配置给 deno 语言服务器，而 `import_map.npm.json` 是配置给 dnt/pnpm 使用的。在复杂的项目中，建议你用脚本自动生成并管理它。\n\n### 进阶技巧\n\n在 deno 的开发中，我们的理念是面向文件而不是面向模块，因此如果有需要，你需要增加这样的配置在`deno.json`中：\n\n```jsonc\n{\n  // ...\n  \"imports\": {\n    // ...\n    \"@dnt-mono/module-a\": \"./packages/module-a/index.ts\",\n    \"@dnt-mono/module-a/\": \"./packages/module-a/src/\",\n    \"@dnt-mono/module-b\": \"./packages/module-b/index.ts\",\n    \"@dnt-mono/module-b/\": \"./packages/module-b/src/\"\n    // ...\n  }\n}\n```\n\n我习惯将除了 `index.ts` 意外的文件放到 `src` 目录下，这会更加符合 node 项目的风格。\n\n> 但切记，不要把 index.ts 文件也挪到 `src` 目录下，否则会引发异常 [#249](https://github.com/denoland/dnt/issues/249)\n\n然后，就是 dnt 的配置，你需要遍历你所有的文件，并将它配置到 entryPoints 中：\n\n```ts\nbuild({\n  entryPoints: [\n    // default entry\n    { name: \".\", path: packageResolve(\"./index.ts\") },\n    // src files\n    ALL_SRC_TS_FILES.map((name) => ({\n      name: `./${name}`,\n      path: `./src/${name}`,\n    })),\n  ],\n  // ...\n});\n```\n\n现在，你就可以写这样的代码了：\n\n```ts\nimport { xxx } from \"@dnt-mono/module-a/xxx.ts\";\n```\n\n### 注意事项\n\n1. 规划好你的项目结构，避免形成循环依赖。如果有需要，你需要自己配置 peerDependencies\n1. 不要在某个模块中做自引入。\n   > 语言服务器并不理解你最终要发布 npm 的意图，所以即便 deno 能正确工作，但你的目的是让 node 也能工作。\n   ```ts\n   import { a } from \"@dnt-mono/module-a\"; // don't import module-a in module-a\n   ```\n   在正式的项目中，建议编写 lint 规则来避免这种错误的发生\n\n### 优势\n"}}}