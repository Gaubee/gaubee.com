{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"textArea's-placeholder-cannot-be-newline-solutions"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"textArea的placeholder不能换行的解决方案","date":"!Date:2013-10-11T12:49:35.000Z","updated":"!Date:2015-01-09T05:08:16.000Z","id":"textArea's-placeholder-cannot-be-newline-solutions","createdAt":"!Date:2013-10-11T12:49:35.000Z","updatedAt":"!Date:2015-01-09T05:08:16.000Z","tags":[]},"htmlContent":"<p><em>JS解决方案当然是最万能的。</em>\n所以这里主要讲的是CSS解决方案，整理自鬼懿IT高级群的讨论 <em>10-11-2013</em>。\n先上一段官方的说辞：</p>\n<blockquote>\n<p>The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry. A hint could be a sample value or a brief description of the expected format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.</p>\n</blockquote>\n<h2>1</h2>\n<p>首先要知道的是HTML属性中的值会原封不动地输出到页面中，所以：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-html\"><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">=</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"line1  \\n lin2 </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\">&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">br> line3 \\A line4 </span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">line5\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>&#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span></code></pre>\n<p>是不会其任何作用的（这里line4和line5中的回车写法会被过滤掉，但是title属性就不会）。\n所以就要借用到CSS。</p>\n<h2>2</h2>\n<p>先说webkit浏览器的解决方案：\n首先要知道placeholder属性是可以用css来操作的，设置字体颜色、字体大小等等等。\n（相关文章：<a href=\"http://davidwalsh.name/html5-placeholder-css\">HTML5 Placeholder Styling with CSS</a>）\n所以我们就可以用after伪类来实现把placeholder内容写到CSS中，这样就绕开了HTML属性的渲染方案：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-css\"><span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">::-webkit-input-placeholder:after</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  content</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">:</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"line@ </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\A</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> line#\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/* 这里 \\A 形成回车符号  */</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  color</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">red</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span></code></pre>\n<h2>3</h2>\n<p>在兼容性写法中，不同浏览器的标示要分开来写，否则使解析器混淆CSS语义：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-css\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/* 错误写法 */</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">input</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">::-webkit-input-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">input</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">:-moz-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{  }</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-css\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/* 正确写法 */</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">input</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">::-webkit-input-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">input</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">:-moz-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2>4</h2>\n<p>然而群里面还对此提出一个观点，就是不应该在CSS中写应该在HTML中写的内容：</p>\n<blockquote>\n<p>多语言的应用，这样还得连css也加入翻译转换\n(js)不太靠谱，css这东西顺序有关，你知道插哪儿啊</p>\n<blockquote>\n<p>240</p>\n</blockquote>\n</blockquote>\n<p>总之，这种绕着弯子完成的解决方案本身就有缺陷，毕竟没有那么多空子给你转。</p>\n<h2>5</h2>\n<p>另外，通过 <strong>计算空格</strong> 来让placeholder自动换行也是个比较恶心的解决方案。但精力上绝对比较省，需要些一个计算空格的函数，耦合度也不会像上面CSS解决方案那么高。</p>\n<h2>6</h2>\n<p>最后还有一个值得一提的就是下面这种无法生效的写法：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-html\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">&#x3C;!-- placeholder属性必须存在且非空 --></span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">=</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> data-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">=</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\\A  line2\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>&#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-css\"><span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#85E89D\">textarea</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">::-webkit-input-placeholder:after</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  content</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">:</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"line1\"</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> attr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">data-placeholder</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\A</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">  line3\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  color</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">red</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span></code></pre>\n<p>这里无法获取到data-placeholder属性的值，因为双伪类导致<code>:after</code>的对象不是textarea，而是<code>placeholder</code>（shadow DOM）。</p>\n<p>最后给出stackoverflow上<a href=\"http://stackoverflow.com/questions/7189223/can-you-have-multiline-html5-placeholder-text-in-a-textarea\">相关的问题及其解答</a>，涉及到更多详细的内容，值得一读。</p>\n","markdownContent":"\n_JS解决方案当然是最万能的。_\n所以这里主要讲的是CSS解决方案，整理自鬼懿IT高级群的讨论 _10-11-2013_。\n先上一段官方的说辞：\n\n> The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry. A hint could be a sample value or a brief description of the expected format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.\n## 1\n\n首先要知道的是HTML属性中的值会原封不动地输出到页面中，所以：\n\n``` html\n<textarea placeholder=\"line1  \\n lin2 <br> line3 \\A line4 \nline5\"></textarea>\n```\n\n是不会其任何作用的（这里line4和line5中的回车写法会被过滤掉，但是title属性就不会）。\n所以就要借用到CSS。\n## 2\n\n先说webkit浏览器的解决方案：\n首先要知道placeholder属性是可以用css来操作的，设置字体颜色、字体大小等等等。\n（相关文章：[HTML5 Placeholder Styling with CSS](http://davidwalsh.name/html5-placeholder-css)）\n所以我们就可以用after伪类来实现把placeholder内容写到CSS中，这样就绕开了HTML属性的渲染方案：\n\n``` css\ntextarea::-webkit-input-placeholder:after{\n  content:\"line@ \\A line#\";/* 这里 \\A 形成回车符号  */\n  color:red;\n};\n```\n## 3\n\n在兼容性写法中，不同浏览器的标示要分开来写，否则使解析器混淆CSS语义：\n\n``` css\n/* 错误写法 */\ninput::-webkit-input-placeholder,\ninput:-moz-placeholder{  }\n```\n\n``` css\n/* 正确写法 */\ninput::-webkit-input-placeholder{}\n\ninput:-moz-placeholder{}\n\n```\n## 4\n\n然而群里面还对此提出一个观点，就是不应该在CSS中写应该在HTML中写的内容：\n\n> 多语言的应用，这样还得连css也加入翻译转换\n> (js)不太靠谱，css这东西顺序有关，你知道插哪儿啊\n> \n> > 240\n\n总之，这种绕着弯子完成的解决方案本身就有缺陷，毕竟没有那么多空子给你转。\n## 5\n\n另外，通过 **计算空格** 来让placeholder自动换行也是个比较恶心的解决方案。但精力上绝对比较省，需要些一个计算空格的函数，耦合度也不会像上面CSS解决方案那么高。\n## 6\n\n最后还有一个值得一提的就是下面这种无法生效的写法：\n\n``` html\n<!-- placeholder属性必须存在且非空 -->\n<textarea  placeholder=\" \" data-placeholder=\"\\A  line2\"></textarea>\n```\n\n``` css\ntextarea::-webkit-input-placeholder:after{\n  content:\"line1\" attr(data-placeholder) \"\\A  line3\";\n  color:red;\n};\n```\n\n这里无法获取到data-placeholder属性的值，因为双伪类导致`:after`的对象不是textarea，而是`placeholder`（shadow DOM）。\n\n最后给出stackoverflow上[相关的问题及其解答](http://stackoverflow.com/questions/7189223/can-you-have-multiline-html5-placeholder-text-in-a-textarea)，涉及到更多详细的内容，值得一读。\n"}}}