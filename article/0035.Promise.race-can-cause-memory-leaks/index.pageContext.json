{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"0035.Promise.race-can-cause-memory-leaks"},"data":{"article":{"fileEntry":{"path":"/home/runner/work/gaubee.com/gaubee.com/articles/0035.Promise.race-can-cause-memory-leaks.md","options":{"cwd":"/home/runner/work/gaubee.com/gaubee.com/articles"},"isFile":true,"isDirectory":false},"originMetadata":{"layout":"layouts/article.njk","title":"Promise.race会带来内存泄露","date":"!Date:2020-04-23T01:00:08.000Z","updated":"!Date:2020-04-23T01:02:06.000Z"},"metadata":{"layout":"layouts/article.njk","title":"Promise.race会带来内存泄露","date":"!Date:2020-04-23T01:00:08.000Z","updated":"!Date:2020-04-23T01:02:06.000Z","id":"0035.Promise.race-can-cause-memory-leaks","createdAt":"!Date:2020-04-23T01:00:08.000Z","updatedAt":"!Date:2020-04-23T01:02:06.000Z","tags":[]},"htmlContent":"<p>假若有两个promise: a, b，现在它们都<code>Promise.race([a,b])</code>所包裹。\n此时，如果a先完成了resolve，race也就有了返回值。\n然而，b却迟迟没有被resolve或者reject……\n结果会带来隐式的内存问题，就是a看上去被释放了，但其实没有。\nv8论坛上有类似的bug提交：<a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=9858\">https://bugs.chromium.org/p/v8/issues/detail?id=9858</a></p>\n<p>简单地模拟一下实现：</p>\n<pre><code class=\"language-js\">function race(...promises){\n  return new Promise((resolve, reject)=>{\n    for(const p of promises){\n      p.then(resolve, reject)\n    }\n  })\n}\n</code></pre>\n<p>我实际测试了一下，一些不同版本的v8似乎会有不同的表现，但终归是内存泄漏了，只是好像v12的是直接泄漏了捕捉不到，v13是能在内存堆栈里头看到。\n我在工作的时候发现这个问题也是靠async_hooks的异步资源监控下才看到这个问题的存在。</p>\n<p>解决方案其实也不难，核心问题就是消除引用：</p>\n<ol>\n<li>首先我们需要一个<code>Promise.prototype.safeThen</code>的实现，因为<code>Promise.prototype.then</code>是会返回出一个新的promise的。做法其实就是只使用一次then来代理实现。其返回值就是<code>thened: { resolves: Set&#x3C;Function>, rejects: Set&#x3C;Function>, isFinished: boolean }</code></li>\n<li>接着我们基于<code>safeThen</code>来实现<code>Promise.safePromiseRace</code>，重点在于收集thened对象，并主动进行释放：</li>\n</ol>\n<pre><code>function safePromiseRace(...promises){\n  return new Promise((resolve, reject)=>{\n    const thenedList = []\n    const finished = ()=>{\n      thenedList.forEach(thened=>{\n        thened.resolves.delete(safeResolve);\n        thened.rejects.delete(safeReject);\n      })\n    }\n    const safeResolve = (v)=>{resolve(v); finished();}\n    const safeReject = (v)=>{reject(v); finished();}\n    for(const p of promises){\n      thenedList.push(p.safeThen(safeResolve, safeReject))\n    }\n  })\n}\n</code></pre>","markdownContent":"\n假若有两个promise: a, b，现在它们都`Promise.race([a,b])`所包裹。\n此时，如果a先完成了resolve，race也就有了返回值。\n然而，b却迟迟没有被resolve或者reject……\n结果会带来隐式的内存问题，就是a看上去被释放了，但其实没有。\nv8论坛上有类似的bug提交：https://bugs.chromium.org/p/v8/issues/detail?id=9858\n\n简单地模拟一下实现：\n```js\nfunction race(...promises){\n  return new Promise((resolve, reject)=>{\n    for(const p of promises){\n      p.then(resolve, reject)\n    }\n  })\n}\n```\n\n我实际测试了一下，一些不同版本的v8似乎会有不同的表现，但终归是内存泄漏了，只是好像v12的是直接泄漏了捕捉不到，v13是能在内存堆栈里头看到。\n我在工作的时候发现这个问题也是靠async_hooks的异步资源监控下才看到这个问题的存在。\n\n解决方案其实也不难，核心问题就是消除引用：\n1. 首先我们需要一个`Promise.prototype.safeThen`的实现，因为`Promise.prototype.then`是会返回出一个新的promise的。做法其实就是只使用一次then来代理实现。其返回值就是`thened: { resolves: Set<Function>, rejects: Set<Function>, isFinished: boolean }`\n2. 接着我们基于`safeThen`来实现`Promise.safePromiseRace`，重点在于收集thened对象，并主动进行释放：\n```\nfunction safePromiseRace(...promises){\n  return new Promise((resolve, reject)=>{\n    const thenedList = []\n    const finished = ()=>{\n      thenedList.forEach(thened=>{\n        thened.resolves.delete(safeResolve);\n        thened.rejects.delete(safeReject);\n      })\n    }\n    const safeResolve = (v)=>{resolve(v); finished();}\n    const safeReject = (v)=>{reject(v); finished();}\n    for(const p of promises){\n      thenedList.push(p.safeThen(safeResolve, safeReject))\n    }\n  })\n}\n```\n\n\n"}}}