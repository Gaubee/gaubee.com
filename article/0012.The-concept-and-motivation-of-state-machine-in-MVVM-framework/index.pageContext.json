{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"0012.The-concept-and-motivation-of-state-machine-in-MVVM-framework"},"data":{"article":{"fileEntry":{"path":"/home/runner/work/gaubee.com/gaubee.com/articles/0012.The-concept-and-motivation-of-state-machine-in-MVVM-framework.md","options":{"cwd":"/home/runner/work/gaubee.com/gaubee.com/articles"},"isFile":true,"isDirectory":false},"originMetadata":{"layout":"layouts/article.njk","title":"MVVM框架中关于状态机的概念与实现动机","date":"!Date:2013-12-09T00:55:36.000Z","updated":"!Date:2013-12-10T02:58:15.000Z"},"metadata":{"layout":"layouts/article.njk","title":"MVVM框架中关于状态机的概念与实现动机","date":"!Date:2013-12-09T00:55:36.000Z","updated":"!Date:2013-12-10T02:58:15.000Z","id":"0012.The-concept-and-motivation-of-state-machine-in-MVVM-framework","createdAt":"!Date:2013-12-09T00:55:36.000Z","updatedAt":"!Date:2013-12-10T02:58:15.000Z","tags":[]},"htmlContent":"<p>状态机是目前库中所存在的一个高级的概念，它一定程度上是现有功能的一个组合，使用字符串指令针对状态机的操作，以下是其运作流程：</p>\n<pre><code>绑定一个事件\n    -> 这个事件是一个命令，目前有四种基础命令：\n       （赋值）=，（添加）+，（移除）-，（切换）?\n            -> 事件触发，动态解析命令对状态机进行相应的操作\n               （某种程度上就限制了效率的保证）\n</code></pre>\n<p>这四个基础命令都是统一的格式：双目运算符的格式。\n左边的参数是目标key，字符串类型，所以这是可动态的：</p>\n<pre><code>{{\" {{key}} = {{\"static value\"}} \"}}\n</code></pre>\n<p>可以看到一个命令是一个字符串，而后两个参数都需要用<code>{{}}</code>进行包裹，其中第一个参数作为目标key，第二个参数是赋值内容，在源码不到白行的实现中也是很明了的知道其命令最终编译出来的代码是：</p>\n<pre><code>key = VI.get(key);\nvalue = \"static value\";\n\nVI.set(key,value);\n</code></pre>\n<p>再来一个例子：</p>\n<pre><code>{{\" {{\"key\"}} = {{value}} \"}}\n//==>\nkey = \"key\";\nvalue = VI.get(\"value\");\n\nVI.set(key,value);\n</code></pre>\n<p>在状态机的操作中，两个参数都可以是动态的，就造就了状态机操作这个功能的灵巧与强大。比如一套操作中切换一个状态机，就可以把所有的操作换一个目标换一个效果。如果配合DOM的className进行使用能有什么效果，你懂的。</p>\n<p>然而，状态机强化了View层的功能，我依然不建议把变化大的业务功能放到这块中，如果你不怕被团队的人吐槽的话（××的改个代码还要跑到View层改！！）</p>\n<p>不过这个功能用来写Weight还是很方便的，毕竟Weight中变动的是数据而不是Weight自有的逻辑（好吧我最原始的目的暴露出来的……呵呵）</p>","markdownContent":"\n状态机是目前库中所存在的一个高级的概念，它一定程度上是现有功能的一个组合，使用字符串指令针对状态机的操作，以下是其运作流程：\n\n```\n绑定一个事件\n    -> 这个事件是一个命令，目前有四种基础命令：\n       （赋值）=，（添加）+，（移除）-，（切换）?\n            -> 事件触发，动态解析命令对状态机进行相应的操作\n               （某种程度上就限制了效率的保证）\n```\n\n这四个基础命令都是统一的格式：双目运算符的格式。\n左边的参数是目标key，字符串类型，所以这是可动态的：\n\n```\n{{\" {{key}} = {{\"static value\"}} \"}}\n```\n\n可以看到一个命令是一个字符串，而后两个参数都需要用`{{}}`进行包裹，其中第一个参数作为目标key，第二个参数是赋值内容，在源码不到白行的实现中也是很明了的知道其命令最终编译出来的代码是：\n\n```\nkey = VI.get(key);\nvalue = \"static value\";\n\nVI.set(key,value);\n```\n\n再来一个例子：\n\n```\n{{\" {{\"key\"}} = {{value}} \"}}\n//==>\nkey = \"key\";\nvalue = VI.get(\"value\");\n\nVI.set(key,value);\n```\n\n在状态机的操作中，两个参数都可以是动态的，就造就了状态机操作这个功能的灵巧与强大。比如一套操作中切换一个状态机，就可以把所有的操作换一个目标换一个效果。如果配合DOM的className进行使用能有什么效果，你懂的。\n\n然而，状态机强化了View层的功能，我依然不建议把变化大的业务功能放到这块中，如果你不怕被团队的人吐槽的话（××的改个代码还要跑到View层改！！）\n\n不过这个功能用来写Weight还是很方便的，毕竟Weight中变动的是数据而不是Weight自有的逻辑（好吧我最原始的目的暴露出来的……呵呵）\n"}}}