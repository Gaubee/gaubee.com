{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"0018.Talk-about-single-page-applications-for-SEO"},"data":{"article":{"fileEntry":{"path":"/home/runner/work/gaubee.com/gaubee.com/articles/0018.Talk-about-single-page-applications-for-SEO.md","options":{"cwd":"/home/runner/work/gaubee.com/gaubee.com/articles"},"isFile":true,"isDirectory":false},"originMetadata":{"layout":"layouts/article.njk","title":"谈谈单页应用于SEO","date":"!Date:2014-03-11T03:47:29.000Z","updated":"!Date:2014-03-11T03:47:29.000Z"},"metadata":{"layout":"layouts/article.njk","title":"谈谈单页应用于SEO","date":"!Date:2014-03-11T03:47:29.000Z","updated":"!Date:2014-03-11T03:47:29.000Z","id":"0018.Talk-about-single-page-applications-for-SEO","createdAt":"!Date:2014-03-11T03:47:29.000Z","updatedAt":"!Date:2014-03-11T03:47:29.000Z","tags":[]},"htmlContent":"<blockquote>\n<p>注： 本文章的文字内容来自鬼懿群 20:00 2014/3/10 的内容，并非访谈形式。内容有所删减。</p>\n</blockquote>\n<h2>第一话 各自的方案</h2>\n<p><strong>@浩明 1999</strong>\n现在网上大部分流传的方法是这样：</p>\n<p>index.html 的代码如下：</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"Ajax.html?id=1\" onclick=\"fun(1);return false;\">1&#x3C;/a>\n&#x3C;a href=\"Ajax.html?id=2\" onclick=\"fun(2);return false;\">2&#x3C;/a>\n&#x3C;a href=\"Ajax.html?id=3\" onclick=\"fun(3);return false;\">3&#x3C;/a>\n</code></pre>\n<p>通过在 A 标签上 return false 来区别搜索引擎和用户。</p>\n<p>那我有一个疑问，搜索引擎收录的页面链接是 Ajax.html?id=3，如果我在百度搜索到内容，点进去的应该是 Ajax.html?id=3 这个页面，而我们的期望并不是这样啊，我们是希望用户点击到 index.html 这个页面并触发 onclick=\"fun(3);</p>\n<p>那我们能不能在 Ajax.html?id=3 这个页面中用 js 跳转到 index.html</p>\n<hr>\n<p><strong>@Igin</strong>\nAjax.html?id=3 用 js 跳转不合适\n等于这个页面加载了却浪费不用\n你可以在服务端直接重定向\n或者用 google 认识的 <code>#!</code></p>\n<hr>\n<p><strong>@漂 ౣ 流 ౣ 瓶 ౣ</strong>\n搜一下 facebook 的 quickling 吧，这个有现成的解决方案\nquickling 是比较完美的解决方案</p>\n<hr>\n<p><strong>@天猪</strong>\nprerender.io</p>\n<hr>\n<p><strong>@Gaubee</strong>\n纯粹的单页面太极端了，开发起来也并不是最好的选择。我现在都是混合在用，应用是单页的，其它的依旧是分页面。</p>\n<hr>\n<p><strong>@蚂蚁 zzbo</strong>\n百度用 baidumap.xml ...</p>\n<h2>第二话 磨</h2>\n<p><strong>@雨夜带刀</strong>\n单页面对前端是有很大的挑战\n能提升用户体验那是显而易见的\n（前端）出错了只能怪代码没写好 所以一定要保证 js 不能出错</p>\n<hr>\n<p><strong>@Gaubee</strong>\n等于把后端的框架往前端搬。工作量确实很大，我基本上已经离不开 requirejs 了。\n有模块开发的规范的话，错误的出现会比较容易处理。\n做测试也会容易\n那些考虑单页面 SEO 的，感觉都是把炫酷的 H5 技术滥用了。\n个人觉得 hash 路由主要使用在 web 应用上。而不是非要到处使用。别扭就是别扭。</p>\n<hr>\n<p><strong>@雨夜带刀</strong>\n<a href=\"http://image.so.com/zv?ch=pet&#x26;cid=%E7%83%AD%E9%97%A8&#x26;tid=#groupid=cd2f127aa7d0a72bede10f2a626babe7&#x26;dataindex=34&#x26;lightboxindex=7&#x26;itemindex=0\">http://image.so.com/zv?ch=pet&#x26;cid=热门&#x26;tid=#groupid=cd2f127aa7d0a72bede10f2a626babe7&#x26;dataindex=34&#x26;lightboxindex=7&#x26;itemindex=0</a>\n<a href=\"http://music.163.com\">http://music.163.com</a>\n看应用场景 像我上面发的都很具代表性\n普通的站点真心没必要</p>\n<hr>\n<p><strong>@漂 ౣ 流 ౣ 瓶 ౣ</strong>\n借助后端，是可以实现这样一种页面输出能力：\n1 直接访问页面 a，比如 url 是 /a ，返回的内容是正常的 html\n2 如果希望把 a 页面中的某些模块以 json 形式返回，比如 url 是 /a?pagelets=m1,m2 这个 url 的返回结果是 json，json 包括了 m1，m2 模块的 js、css 以及 html 内容，前端加载其 js、css、并插入 html 就可以实现局刷了。</p>\n<p>实现这两个功能，就能解决：\n1 无 js 用户或者网络爬虫用户访问 a 或者 b 页面时，返回的是普通的 html\n2 当用从 a 页面切换到 b 页面的时候，可以用 js 发起 /b?pagelets=m3,m4 来局部刷新</p>\n<p>这种方式就是 facebook 的 quickling 实现原理，它的页面代码形如：</p>\n<p><img src=\"/img/spa-seo/img-1.jpg\" alt=\"facebookquickling\"></p>\n<p>直接访问页面，返回完整的 html，如果访问 的 url 加上 pagelets=left,right，就会返回两个页面小部件的 js、css 和 html 的 json 数据</p>\n<p>代码很简单：\n假设上面的例子的文件叫 a.php，其实有一个后端的控制框架，代码是这样的：</p>\n<pre><code class=\"language-php\">&#x3C;?php\n$pagelets = $_GET['pagelets'];\nif($pagelets){\n    Pagelet::use($pagelets);\n    ob_start();\n    include 'a.php';\n    ob_end();\n    echo Pagelet::render();\n}  else {\n    echo include 'a.php';\n}\n>\n</code></pre>\n<p>也就是同一个页面，如果请求中有 pagelets 参数，就抑制原始的 html 输出，改成 Pagelet 收集，否则就正常输出\n然后，我们考虑一下，那个 load_pagelet 函数是怎么实现的。\n其实就是一个简单的命中而已。有一个 Pagelet 框架帮忙收集，最后将数据以 json 形势吐出\n这样，工程师好像在写一个普通的 html 页面，但是可以在 ajax 化和非 ajax 化之间切换</p>\n<p><img src=\"/img/spa-seo/img-2.jpg\" alt=\"facebookquickling\"></p>\n<p>有一个前端框架，页面加载之后，找到所有有 pagelets 属性的 a 标签，抑制它的点击，点击的时候，改成 ajax 请求 /b?pagelets=xxx</p>\n<p>对于搜索引擎用户，它不能执行 js，这个时候 /b 这个链接是正确的，访问也是正常的 html</p>\n<p>对于可以执行 js 的用户，它的那个 url 被 js 拦截，发起了一个 ajax 请求 /b?pagelets=left,right 并能做到页面的 ajax 化</p>\n<hr>\n<p><strong>@雨夜带刀</strong>\n我说的不是同一个页面是针对用户来说\n搜索引擎和真实的用户\n本身做搜索的体验不到需要兼容搜索引擎的难处...\n这个解决方案貌似还行</p>\n<hr>\n<p><strong>@漂 ౣ 流 ౣ 瓶 ౣ</strong>\najax 和 seo 不是鱼和熊掌，而是要跨栈联合解决的，页面可以有两种输出模式，并且能实现静态资源的组件化管理，这些都有完整实现的，比如 facebook 在 velocity2010 上关于 ajax 流水化的分享。另外百度的 hao123，贴吧的 pad 版都是这样实现的</p>\n<hr>\n<p><strong>@Gaubee</strong>\n等于就做了两个网站，\n一个针对 SEO，主打关键字展示。\n一个针对浏览器用户，返回真正的程序数据。</p>\n<p>要我我就直接做两套路由。硬生生整合在一起没理由啊</p>\n<hr>\n<p><strong>@漂 ౣ 流 ౣ 瓶 ౣ</strong>\n没有硬生生整合\n其实上面的截图也能看到，工程师基本上感觉不到在写一个 ajax 化的网站\n而是传统的 html 页面，这种工程上的优化收益很大的。此外，这里还有一种技术叫 pagecache\n比如 a 页面切换到 b 页面的时候，前端可以记录 a 和 b 页面所用到的静态资源和 html 内容，那么，下次 ab 页面之间切换的时候，不用再发起 ajax 请求，而是直接从内存中恢复页面即可\nfacebook 会保留几个用户最常访问的页面的 pagecache，提高访问速度\n大家可以感受一下百度贴吧 pad 版的这个效果</p>\n<hr>\n<p><strong>@Gaubee</strong>\n嗯。是这样子的。我只是觉得没必要把细节隐藏起来，开发者知道整套构架最好。观点不一样，这点我没什么好说的。\npagecache 是等于把资源手动存储么。等于 cookie 再过期时间内无需重新请求资源。</p>\n<hr>\n<p><strong>@漂 ౣ 流 ౣ 瓶 ౣ</strong>\n恩，没有隐藏全部细节，因为链接还是要指定要异步的 pagelets 的 id 的，以及要填充的容器 id</p>\n<p><img src=\"/img/spa-seo/img-3.jpg\" alt=\"facebookquickling\"></p>\n<p>这样两个 tab 短时间内切换是没有 http 请求的</p>\n<p><img src=\"/img/spa-seo/img-4.jpg\" alt=\"facebookquickling\"></p>\n<p>这个种方式还能解决一个问题，就是 ajax 化的网站通常会有一个 loading 界面，因为页面内容是异步刷新得到的，而这种解决方案可以在第一次请求的时候直接生成整个 html 内容，之后再跳转页面就是 ajax 化的了，体验上也有优势</p>\n<p>我们也是从 facebook 网站源码、velocity 分享以及他们的 GitHub 上这些碎片信息里分析到的</p>","markdownContent":"\n> 注： 本文章的文字内容来自鬼懿群 20:00 2014/3/10 的内容，并非访谈形式。内容有所删减。\n\n## 第一话 各自的方案\n\n**@浩明 1999**\n现在网上大部分流传的方法是这样：\n\nindex.html 的代码如下：\n\n```html\n<a href=\"Ajax.html?id=1\" onclick=\"fun(1);return false;\">1</a>\n<a href=\"Ajax.html?id=2\" onclick=\"fun(2);return false;\">2</a>\n<a href=\"Ajax.html?id=3\" onclick=\"fun(3);return false;\">3</a>\n```\n\n通过在 A 标签上 return false 来区别搜索引擎和用户。\n\n那我有一个疑问，搜索引擎收录的页面链接是 Ajax.html?id=3，如果我在百度搜索到内容，点进去的应该是 Ajax.html?id=3 这个页面，而我们的期望并不是这样啊，我们是希望用户点击到 index.html 这个页面并触发 onclick=\"fun(3);\n\n那我们能不能在 Ajax.html?id=3 这个页面中用 js 跳转到 index.html\n\n---\n\n**@Igin**\nAjax.html?id=3 用 js 跳转不合适\n等于这个页面加载了却浪费不用\n你可以在服务端直接重定向\n或者用 google 认识的 `#!`\n\n---\n\n**@漂 ౣ 流 ౣ 瓶 ౣ**\n搜一下 facebook 的 quickling 吧，这个有现成的解决方案\nquickling 是比较完美的解决方案\n\n---\n\n**@天猪**\nprerender.io\n\n---\n\n**@Gaubee**\n纯粹的单页面太极端了，开发起来也并不是最好的选择。我现在都是混合在用，应用是单页的，其它的依旧是分页面。\n\n---\n\n**@蚂蚁 zzbo**\n百度用 baidumap.xml ...\n\n## 第二话 磨\n\n**@雨夜带刀**\n单页面对前端是有很大的挑战\n能提升用户体验那是显而易见的\n（前端）出错了只能怪代码没写好 所以一定要保证 js 不能出错\n\n---\n\n**@Gaubee**\n等于把后端的框架往前端搬。工作量确实很大，我基本上已经离不开 requirejs 了。\n有模块开发的规范的话，错误的出现会比较容易处理。\n做测试也会容易\n那些考虑单页面 SEO 的，感觉都是把炫酷的 H5 技术滥用了。\n个人觉得 hash 路由主要使用在 web 应用上。而不是非要到处使用。别扭就是别扭。\n\n---\n\n**@雨夜带刀**\n[http://image.so.com/zv?ch=pet&cid=热门&tid=#groupid=cd2f127aa7d0a72bede10f2a626babe7&dataindex=34&lightboxindex=7&itemindex=0](http://image.so.com/zv?ch=pet&cid=热门&tid=#groupid=cd2f127aa7d0a72bede10f2a626babe7&dataindex=34&lightboxindex=7&itemindex=0)\n[http://music.163.com](http://music.163.com)\n看应用场景 像我上面发的都很具代表性\n普通的站点真心没必要\n\n---\n\n**@漂 ౣ 流 ౣ 瓶 ౣ**\n借助后端，是可以实现这样一种页面输出能力：\n1 直接访问页面 a，比如 url 是 /a ，返回的内容是正常的 html\n2 如果希望把 a 页面中的某些模块以 json 形式返回，比如 url 是 /a?pagelets=m1,m2 这个 url 的返回结果是 json，json 包括了 m1，m2 模块的 js、css 以及 html 内容，前端加载其 js、css、并插入 html 就可以实现局刷了。\n\n实现这两个功能，就能解决：\n1 无 js 用户或者网络爬虫用户访问 a 或者 b 页面时，返回的是普通的 html\n2 当用从 a 页面切换到 b 页面的时候，可以用 js 发起 /b?pagelets=m3,m4 来局部刷新\n\n这种方式就是 facebook 的 quickling 实现原理，它的页面代码形如：\n\n![facebookquickling](/img/spa-seo/img-1.jpg)\n\n直接访问页面，返回完整的 html，如果访问 的 url 加上 pagelets=left,right，就会返回两个页面小部件的 js、css 和 html 的 json 数据\n\n代码很简单：\n假设上面的例子的文件叫 a.php，其实有一个后端的控制框架，代码是这样的：\n\n```php\n<?php\n$pagelets = $_GET['pagelets'];\nif($pagelets){\n    Pagelet::use($pagelets);\n    ob_start();\n    include 'a.php';\n    ob_end();\n    echo Pagelet::render();\n}  else {\n    echo include 'a.php';\n}\n>\n```\n\n也就是同一个页面，如果请求中有 pagelets 参数，就抑制原始的 html 输出，改成 Pagelet 收集，否则就正常输出\n然后，我们考虑一下，那个 load_pagelet 函数是怎么实现的。\n其实就是一个简单的命中而已。有一个 Pagelet 框架帮忙收集，最后将数据以 json 形势吐出\n这样，工程师好像在写一个普通的 html 页面，但是可以在 ajax 化和非 ajax 化之间切换\n\n![facebookquickling](/img/spa-seo/img-2.jpg)\n\n有一个前端框架，页面加载之后，找到所有有 pagelets 属性的 a 标签，抑制它的点击，点击的时候，改成 ajax 请求 /b?pagelets=xxx\n\n对于搜索引擎用户，它不能执行 js，这个时候 /b 这个链接是正确的，访问也是正常的 html\n\n对于可以执行 js 的用户，它的那个 url 被 js 拦截，发起了一个 ajax 请求 /b?pagelets=left,right 并能做到页面的 ajax 化\n\n---\n\n**@雨夜带刀**\n我说的不是同一个页面是针对用户来说\n搜索引擎和真实的用户\n本身做搜索的体验不到需要兼容搜索引擎的难处...\n这个解决方案貌似还行\n\n---\n\n**@漂 ౣ 流 ౣ 瓶 ౣ**\najax 和 seo 不是鱼和熊掌，而是要跨栈联合解决的，页面可以有两种输出模式，并且能实现静态资源的组件化管理，这些都有完整实现的，比如 facebook 在 velocity2010 上关于 ajax 流水化的分享。另外百度的 hao123，贴吧的 pad 版都是这样实现的\n\n---\n\n**@Gaubee**\n等于就做了两个网站，\n一个针对 SEO，主打关键字展示。\n一个针对浏览器用户，返回真正的程序数据。\n\n要我我就直接做两套路由。硬生生整合在一起没理由啊\n\n---\n\n**@漂 ౣ 流 ౣ 瓶 ౣ**\n没有硬生生整合\n其实上面的截图也能看到，工程师基本上感觉不到在写一个 ajax 化的网站\n而是传统的 html 页面，这种工程上的优化收益很大的。此外，这里还有一种技术叫 pagecache\n比如 a 页面切换到 b 页面的时候，前端可以记录 a 和 b 页面所用到的静态资源和 html 内容，那么，下次 ab 页面之间切换的时候，不用再发起 ajax 请求，而是直接从内存中恢复页面即可\nfacebook 会保留几个用户最常访问的页面的 pagecache，提高访问速度\n大家可以感受一下百度贴吧 pad 版的这个效果\n\n---\n\n**@Gaubee**\n嗯。是这样子的。我只是觉得没必要把细节隐藏起来，开发者知道整套构架最好。观点不一样，这点我没什么好说的。\npagecache 是等于把资源手动存储么。等于 cookie 再过期时间内无需重新请求资源。\n\n---\n\n**@漂 ౣ 流 ౣ 瓶 ౣ**\n恩，没有隐藏全部细节，因为链接还是要指定要异步的 pagelets 的 id 的，以及要填充的容器 id\n\n![facebookquickling](/img/spa-seo/img-3.jpg)\n\n这样两个 tab 短时间内切换是没有 http 请求的\n\n![facebookquickling](/img/spa-seo/img-4.jpg)\n\n这个种方式还能解决一个问题，就是 ajax 化的网站通常会有一个 loading 界面，因为页面内容是异步刷新得到的，而这种解决方案可以在第一次请求的时候直接生成整个 html 内容，之后再跳转页面就是 ajax 化的了，体验上也有优势\n\n我们也是从 facebook 网站源码、velocity 分享以及他们的 GitHub 上这些碎片信息里分析到的\n"}}}