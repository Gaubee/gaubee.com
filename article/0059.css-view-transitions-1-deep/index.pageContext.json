{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"0059.css-view-transitions-1-deep"},"data":{"article":{"fileEntry":{"path":"/home/runner/work/gaubee.com/gaubee.com/articles/0059.css-view-transitions-1-deep.md","options":{"cwd":"/home/runner/work/gaubee.com/gaubee.com/articles"},"isFile":true,"isDirectory":false},"originMetadata":{"title":"View Transitions API (Level-1 single-document) 进阶","date":"!Date:2025-04-17T03:16:39.806Z","updated":"!Date:2025-04-17T03:16:39.806Z"},"metadata":{"title":"View Transitions API (Level-1 single-document) 进阶","date":"!Date:2025-04-17T03:16:39.806Z","updated":"!Date:2025-04-17T03:16:39.806Z","id":"0059.css-view-transitions-1-deep","createdAt":"!Date:2025-04-17T03:16:39.806Z","updatedAt":"!Date:2025-04-17T03:16:39.806Z","tags":[]},"htmlContent":"<p>上次咱们聊了 View Transitions 的基础，那感觉就像发现新大陆，丝滑得不行。但真正在复杂的 SPA（单页应用）场景里用起来，尤其是想模拟原生 App 那种细腻的转场效果时，你可能会发现，这“丝滑”背后，可能藏着一些“蛋疼”的细节。</p>\n<p><strong>核心矛盾点</strong>：<code>View Transitions Level 1</code> 的设计哲学是<strong>针对单个文档内 DOM 状态变化的视觉过渡</strong>。而 SPA 的常见模式是在<strong>单个文档里模拟多个“页面”的导航切换</strong>。这种模式上的错位，是许多复杂问题的根源。Level 1 并没有“页面”或“路由”的概念，它只关心“变化前”和“变化后”的 DOM 快照。</p>\n<p>接下来，咱们通过一些实践案例，深入探讨在 SPA 中应用 View Transitions 的复杂性、局限性以及特定场景下的思考。</p>\n<h2>一、SPA 导航模拟：看起来很美，做起来费心</h2>\n<p><a href=\"https://appn.dwewb.com/examples/kitchen-sink/view-transition-demo-ios-navigation/\">ios-navigation demo by view-transition</a>\n咱们来看一个常见的需求：在 SPA 里模拟类似 iOS 的导航栏切换效果。这个效果细节不少：</p>\n<ol>\n<li><strong>页面整体</strong>：新页面从右侧滑入，覆盖旧页面。</li>\n<li><strong>返回按钮图标 (backIcon)</strong>：在切换过程中，位置保持不动（视觉上像钉在那里）。</li>\n<li><strong>返回按钮文字 (backText)</strong>：由旧页面的标题 (title) “变形”而来。它不是简单地淡入淡出，而是从旧标题的位置平滑移动并变成返回文字。</li>\n<li><strong>新页面标题 (title)</strong>：随着新页面整体从右侧滑入。</li>\n</ol>\n<p>听起来用 View Transitions 的 <code>view-transition-name</code> 标记一下对应元素，浏览器就该自动搞定了吧？比如 Compose 或 SwiftUI 里的 <code>sharedElement</code> / <code>matchedGeometryEffect</code>，声明一下就完事儿了。</p>\n<p><strong>然而，在 View Transitions Level 1 里，事情没那么简单。</strong></p>\n<p>因为我们是在<strong>同一个文档</strong>里操作，当你触发 <code>startViewTransition</code> 时，浏览器需要拍“旧状态”和“新状态”两张快照。如果你在拍快照 <em>之前</em>，新旧两个“页面”的对应元素（比如两个标题）都设置了<strong>相同的</strong> <code>view-transition-name</code> (例如都叫 <code>title</code>)，那么在拍快照的那个瞬间，DOM 里就存在了两个叫 <code>title</code> 的元素。浏览器：“？？？这名字重了，过渡搞不了！”——于是整个 View Transition 会失败（但你的 DOM 更新回调还是会执行）。</p>\n<p><strong>Compose/SwiftUI 为何简单？</strong> 因为它们的 <code>sharedElement</code> 通常是和导航库/页面生命周期<strong>耦合</strong>的。框架知道你正在从 Page A 导航到 Page B，它能清晰地识别“哪个是旧的 <code>title</code>，哪个是新的 <code>title</code>”，并自动处理它们之间的过渡。</p>\n<p><strong>View Transitions Level 1 怎么做？</strong> 它不耦合导航，只认 DOM 变化。所以，为了让它正确配对，我们必须手动“导演” <code>view-transition-name</code> 的变化过程，通常分三步：</p>\n<ol>\n<li>\n<p><strong><code>startViewTransition</code> 调用前</strong>:</p>\n<ul>\n<li>旧页面的元素标记为 <code>old-name</code> (e.g., <code>old-title</code>)。</li>\n<li>新页面的元素（此时可能还未插入 DOM，或插入了但暂时隐藏/移出屏幕）标记为 <code>new-name</code> (e.g., <code>new-title</code>)，或者干脆先不加 <code>view-transition-name</code>。</li>\n<li>在这个例子里，还需要特殊处理：旧标题 <code>old-title</code> 需要过渡到新页面的返回文字 <code>new-backText</code>，旧返回图标 <code>old-backIcon</code> 要过渡到新返回图标 <code>new-backIcon</code>。这涉及到更复杂的名字配对。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>startViewTransition</code> 的回调函数内 (DOM 更新时)</strong>:</p>\n<ul>\n<li>这是最关键的一步，我们要“告诉”浏览器新旧元素的对应关系。</li>\n<li>旧页面的元素可能要移除 <code>view-transition-name</code>，或者设置一个仅用于“离开动画”的名字。</li>\n<li>新页面的元素，此时要正式赋予那个我们希望它<strong>从旧状态过渡而来</strong>的名字。\n<ul>\n<li>例如，在回调里，把旧标题的 <code>view-transition-name</code> 移除（或者让它准备滑走），同时把新页面的 <em>返回按钮文字</em> (<code>backText</code>) 的 <code>view-transition-name</code> 设置为 <code>old-title</code>（这样它就会从旧标题的位置过渡过来）。</li>\n<li>把旧返回图标 (<code>backIcon</code>) 的 <code>view-transition-name</code> 移除（可能伴随透明度变化），同时把新页面的 <code>backIcon</code> 的 <code>view-transition-name</code> 设置为 <code>old-backIcon</code>（让它看起来像是同一个元素）。</li>\n<li>新页面的标题 (<code>title</code>) 则保持 <code>new-title</code>，它会执行自己的“进入”动画（比如从右滑入）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>过渡结束后 (<code>transition.finished</code>)</strong>:</p>\n<ul>\n<li>清理工作。移除不再需要的旧页面 DOM。可能还需要清理掉临时设置的 <code>view-transition-name</code> 或样式。</li>\n</ul>\n</li>\n</ol>\n<p>看下面这个简化的 JS 逻辑示意（完整代码参考你提供的链接）：</p>\n<pre><code class=\"language-javascript\">// 简化示意逻辑\nclass ViewTransitionController {\n  // ... (省略获取元素等)\n\n  beforeStart() {\n    // 1. 准备阶段：获取新旧元素引用，准备新页面内容\n    // ...\n    this.oldEles = this.getEles(canvas.querySelector(\".page\"));\n    const newPageContent = tmp.content.cloneNode(true);\n    this.newEles = this.getEles(newPageContent);\n    this.updateText(); // 更新新页面的标题和返回文字内容\n    canvas.appendChild(newPageContent); // 将新页面添加到 DOM (可能先放在屏幕外)\n\n    // --- 关键：设置初始名字 ---\n    this.oldEles.page.style.viewTransitionName = \"page-old\";\n    this.oldEles.title.style.viewTransitionName = \"title-old\"; // 旧标题\n    this.oldEles.backIcon.style.viewTransitionName = \"backIcon-old\"; // 旧图标\n\n    this.newEles.page.style.viewTransitionName = \"page-new\"; // 新页面整体\n    this.newEles.title.style.viewTransitionName = \"title-new\"; // 新标题\n    // 新返回图标和文字先不给名字，或者给个临时的，避免冲突\n    this.newEles.page.classList.add(\"from-right\"); // 先放右边\n  }\n\n  doStart() {\n    // 2. DOM 更新回调：在这里“重新配对”名字\n    const { oldEles, newEles } = this;\n\n    // 旧元素处理（准备离开）\n    oldEles.page.classList.add(\"to-left\"); // 旧页面整体左滑\n    oldEles.title.style.viewTransitionName = \"\"; // 旧标题不再参与共享过渡，准备淡出或滑出\n    oldEles.backIcon.style.viewTransitionName = \"\"; // 旧图标也类似\n\n    // 新元素处理（准备进入和变形）\n    newEles.page.classList.remove(\"from-right\"); // 新页面移动到位置\n    newEles.backIcon.style.viewTransitionName = \"backIcon-old\"; // 新图标继承旧图标的名字，实现“不动”效果\n    newEles.backText.style.viewTransitionName = \"title-old\"; // 新返回文字继承旧标题的名字，实现“变形”效果\n    // newEles.title 保持 'title-new'，执行自己的进入动画\n    // 可能还需要配合 opacity 等样式变化\n  }\n\n  afterFinish() {\n    // 3. 清理阶段\n    this.oldEles.page.remove(); // 移除旧页面 DOM\n    // 可能还需要清理新元素上临时的 viewTransitionName\n  }\n}\n\n// 使用\nconst vtc = new ViewTransitionController();\nbtnPlay.addEventListener(\"click\", async () => {\n  vtc.beforeStart();\n  const vt = document.startViewTransition(vtc.doStart);\n  await vt.finished;\n  vtc.afterFinish();\n});\n</code></pre>\n<p><strong>小结</strong>：在 SPA 中用 Level 1 实现复杂的多元素协调过渡，需要开发者手动管理 <code>view-transition-name</code> 的生命周期，模拟出跨“页面”共享元素的效果。这比声明式 UI 框架的写法要繁琐得多，心智负担也更重。</p>\n<h2>二、深入 View Transitions 的限制与“脾气”</h2>\n<p>除了 SPA 模拟带来的复杂性，View Transitions 本身也有一些特性或限制需要注意：</p>\n<ol>\n<li>\n<p><strong>渲染抑制 (Rendering Suppression)</strong></p>\n<ul>\n<li><strong>现象</strong>：在 <code>startViewTransition</code> 被调用、快照生成后，直到过渡动画完成（<code>transition.finished</code> resolve），整个原始文档（除了 <code>::view-transition</code> 伪元素树）在视觉上是<strong>不可见且不可交互</strong>的。浏览器会暂停渲染常规内容，只渲染那个特殊的过渡层。</li>\n<li><strong>影响</strong>：这意味着如果你的过渡动画时间较长，用户会有一段时间无法与页面进行任何交互（点击、滚动等）。即便你尝试用 <code>clip-path</code> 裁剪 <code>::view-transition</code> 伪元素，露出来的也不是底下的原始文档，而是一片空白（或浏览器的背景色）。</li>\n<li><strong>结论</strong>：目前无法绕过渲染抑制。因此，View Transitions <strong>不适合做长时间运行的动画</strong>，否则会严重影响用户体验。动画时长应尽量控制在用户可接受的范围内（通常几百毫秒）。</li>\n</ul>\n</li>\n<li>\n<p><strong>快照与元素上下文</strong></p>\n<ul>\n<li><strong>现象</strong>：当一个元素被赋予 <code>view-transition-name</code> 后，浏览器为它拍快照时，可以理解为是把它暂时“抠”了出来。这个快照包含了元素自身及其子元素的渲染结果，但它在某种程度上<strong>脱离了原始的布局上下文</strong>。</li>\n<li><strong>影响</strong>：\n<ul>\n<li><strong><code>overflow: hidden</code> 失效</strong>：如果一个带名字的元素原本被父元素的 <code>overflow: hidden</code> 或 <code>clip-path</code> 裁剪了，在过渡动画中，这个裁剪效果可能会丢失，导致元素完整地显示出来，因为它被渲染在了更高层级的 <code>::view-transition-group</code> 中。你可能需要手动在 <code>::view-transition-group(name)</code> 或对应的 <code>old/new</code> 伪元素上重新应用 <code>clip-path</code> 来模拟裁剪，但这在元素平移时计算会变得复杂。</li>\n<li><strong>其他上下文相关的样式</strong>：某些依赖于父级或兄弟元素的样式（比如特定的混合模式应用）可能在过渡中表现不一致。</li>\n</ul>\n</li>\n<li><strong>建议</strong>：为带名字的元素添加 <code>contain: layout;</code> 或类似属性（如 <code>contain: paint;</code>, <code>contain: strict;</code>, <code>content-visibility: hidden;</code>），可以帮助浏览器优化并减少意外情况，但不能完全解决上下文脱离的问题。</li>\n</ul>\n</li>\n<li>\n<p><strong>CSS 自定义属性 (Custom Properties) 的作用域</strong></p>\n<ul>\n<li><strong>现象</strong>：<code>::view-transition</code> 及其子伪元素位于一个非常高的渲染层级，并且它们的样式似乎与常规 DOM 的级联关系有些微妙。直接在 <code>:root</code> 或 <code>html</code>/<code>body</code> 上通过 <code>style.setProperty('--my-var', value)</code> 设置的自定义属性，<strong>可能无法</strong>直接在 <code>::view-transition-group(*)</code> 等伪元素的 CSS 规则中生效。</li>\n<li><strong>解决方案</strong>：如果你需要在过渡动画中动态改变并在 CSS 中使用自定义属性（比如通过 JS 计算动画参数），目前看来比较可靠的方法是动态创建或修改 CSS 规则本身。例如：\n<ul>\n<li>创建一个 <code>&#x3C;style></code> 标签，动态写入包含自定义属性值的 CSS 规则。</li>\n<li>使用 <code>document.adoptedStyleSheets</code> API，动态添加或修改包含这些规则的 <code>CSSStyleSheet</code> 对象。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2>三、View Transitions 的适用场景与挑战</h2>\n<p>了解了复杂性和限制后，哪些场景适合用，哪些场景要三思？</p>\n<ol>\n<li>\n<p><strong>启动屏幕 (Splash Screen)</strong></p>\n<ul>\n<li><strong>优势</strong>：渲染抑制在这里反而是个优点。你可以在应用初始化、加载资源、准备首屏 DOM 的过程中，用 View Transitions 显示一个启动画面（比如 Logo 淡入淡出）。由于原始文档被抑制渲染和交互，正好符合启动阶段的需求。</li>\n<li><strong>代码结构</strong>：\n<pre><code class=\"language-javascript\">// 伪代码\nprepareSplashScreenDOM(); // 先把启动屏DOM准备好\nconst vt = document.startViewTransition(async () => {\n  // 在这个回调里，异步加载应用资源、初始化状态、渲染主界面DOM\n  await loadAppResources();\n  await initialRender();\n  // DOM 准备好后，可以开始“关闭”启动屏的动画逻辑（比如让Logo飞走）\n  triggerSplashScreenExitAnimationLogic(); // 这部分逻辑可能是更新某些元素的name或样式\n});\n// 可选：监听 finished 后彻底移除启动屏DOM\nvt.finished.then(removeSplashScreenDOM);\n</code></pre>\n</li>\n<li><strong>挑战</strong>：如果想做带有<strong>加载进度条</strong>的启动屏，会遇到前面提到的问题。简单的进度条（比如一个色块变长）可能还行，但如果进度条本身有复杂纹理或效果，View Transitions 默认的 bounds（边界框）动画可能会导致纹理拉伸变形。你需要：\n<ul>\n<li>将纹理独立为一个带 <code>view-transition-name</code> 的元素。</li>\n<li>可能需要隐藏 DOM 元素的原始纹理，在 <code>::view-transition-group(texture)</code> 或 <code>::view-transition-new(texture)</code> 上重新绘制或应用纹理。</li>\n<li>如果想实现平滑的进度更新动画，而不是简单的两点过渡，可能需要放弃 CSS 动画，在 <code>transition.ready</code> 后介入，使用 Web Animations API 精确控制 <code>::view-transition-new(progressBarValue)</code> 的 <code>clip-path</code> 或 <code>transform</code>。</li>\n<li><strong>结论</strong>：对于复杂的、需要实时更新的加载动画，View Transitions 可能增加的复杂性远超其带来的便利，此时不如用传统 JS+CSS 动画方案。</li>\n<li><a href=\"https://appn.dwewb.com/examples/kitchen-sink/view-transition-demo-splash-screen/\">progress demo by view-transition</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>简单的内容切换/卡片展开等</strong></p>\n<ul>\n<li>对于不涉及复杂多元素协调、动画时长可控的场景，View Transitions 依然是很好的选择，比如列表项点击展开为详情、页面主体内容的简单淡入淡出或滑动切换。</li>\n</ul>\n</li>\n</ol>\n<h2>四、开发工具的那点事儿</h2>\n<p>最后吐槽一下，目前的 Chrome DevTools 对 View Transitions 的调试支持有时会“抽风”：</p>\n<ul>\n<li><strong>暂停问题</strong>：在 Animations 面板暂停一个 View Transition 动画后，如果你切换到浏览器的其他标签页，或者切换到其他应用程序一会儿再回来，那个被暂停的 <code>::view-transition</code> 伪元素树有时会<strong>直接消失</strong>，导致无法继续单步调试或检查状态。</li>\n<li><strong>原因猜测</strong> 我猜是为了恢复 <code>::view-transition-root</code> 有关系。比如说，如果你在 view-transition 期间对页面进行 resize，整个 <code>::view-transition</code> 也会瞬间消失。因为需要恢复 <code>::view-transition-root</code> 元素去进行渲染计算。说白了就是 document.documentElement 的所有权需要归还。所以同样的。如果切换浏览器标签，或者切换应用，都会触发页面的生命周期，那么都需要归还 document.documentElement 的所有权。</li>\n<li><strong>影响</strong>：这给调试带来了不便，尤其是在需要频繁切换窗口查文档或对比效果时。</li>\n</ul>\n<p>希望未来的 DevTools 版本能改进这一点。</p>\n<h2>总结与思考</h2>\n<p>CSS View Transitions Level 1 无疑为 Web 带来了强大的原生级动画能力，尤其是在处理简单的状态切换时，能极大简化代码。但它并非银弹。</p>\n<ul>\n<li><strong>核心优势</strong>在于解耦了 DOM 更新和视觉过渡，让状态管理更清晰。</li>\n<li><strong>核心挑战</strong>在于其 Level 1 的设计基于单文档状态快照，当我们在 SPA 中模拟多页面流时，需要手动填补这种模式差异带来的沟壑，尤其是对 <code>view-transition-name</code> 的精细管理。</li>\n<li><strong>局限性</strong>（如渲染抑制、快照上下文问题）也决定了它不适用于所有动画场景，特别是长耗时或需要高度交互保障的过渡。</li>\n</ul>\n<p>对于简单的、符合其设计模型的场景，大胆用，享受它带来的便利。\n对于复杂的、尤其是试图在 SPA 中复刻原生多页面导航细节的场景，请<strong>仔细评估</strong>引入它的成本（代码复杂性、潜在的限制）是否值得。\n有时候，传统的 JS 动画库或纯 CSS 动画可能仍然是更灵活或更稳妥的选择。</p>","markdownContent":"\n上次咱们聊了 View Transitions 的基础，那感觉就像发现新大陆，丝滑得不行。但真正在复杂的 SPA（单页应用）场景里用起来，尤其是想模拟原生 App 那种细腻的转场效果时，你可能会发现，这“丝滑”背后，可能藏着一些“蛋疼”的细节。\n\n**核心矛盾点**：`View Transitions Level 1` 的设计哲学是**针对单个文档内 DOM 状态变化的视觉过渡**。而 SPA 的常见模式是在**单个文档里模拟多个“页面”的导航切换**。这种模式上的错位，是许多复杂问题的根源。Level 1 并没有“页面”或“路由”的概念，它只关心“变化前”和“变化后”的 DOM 快照。\n\n接下来，咱们通过一些实践案例，深入探讨在 SPA 中应用 View Transitions 的复杂性、局限性以及特定场景下的思考。\n\n## 一、SPA 导航模拟：看起来很美，做起来费心\n\n[ios-navigation demo by view-transition](https://appn.dwewb.com/examples/kitchen-sink/view-transition-demo-ios-navigation/)\n咱们来看一个常见的需求：在 SPA 里模拟类似 iOS 的导航栏切换效果。这个效果细节不少：\n\n1.  **页面整体**：新页面从右侧滑入，覆盖旧页面。\n2.  **返回按钮图标 (backIcon)**：在切换过程中，位置保持不动（视觉上像钉在那里）。\n3.  **返回按钮文字 (backText)**：由旧页面的标题 (title) “变形”而来。它不是简单地淡入淡出，而是从旧标题的位置平滑移动并变成返回文字。\n4.  **新页面标题 (title)**：随着新页面整体从右侧滑入。\n\n听起来用 View Transitions 的 `view-transition-name` 标记一下对应元素，浏览器就该自动搞定了吧？比如 Compose 或 SwiftUI 里的 `sharedElement` / `matchedGeometryEffect`，声明一下就完事儿了。\n\n**然而，在 View Transitions Level 1 里，事情没那么简单。**\n\n因为我们是在**同一个文档**里操作，当你触发 `startViewTransition` 时，浏览器需要拍“旧状态”和“新状态”两张快照。如果你在拍快照 _之前_，新旧两个“页面”的对应元素（比如两个标题）都设置了**相同的** `view-transition-name` (例如都叫 `title`)，那么在拍快照的那个瞬间，DOM 里就存在了两个叫 `title` 的元素。浏览器：“？？？这名字重了，过渡搞不了！”——于是整个 View Transition 会失败（但你的 DOM 更新回调还是会执行）。\n\n**Compose/SwiftUI 为何简单？** 因为它们的 `sharedElement` 通常是和导航库/页面生命周期**耦合**的。框架知道你正在从 Page A 导航到 Page B，它能清晰地识别“哪个是旧的 `title`，哪个是新的 `title`”，并自动处理它们之间的过渡。\n\n**View Transitions Level 1 怎么做？** 它不耦合导航，只认 DOM 变化。所以，为了让它正确配对，我们必须手动“导演” `view-transition-name` 的变化过程，通常分三步：\n\n1.  **`startViewTransition` 调用前**:\n\n    - 旧页面的元素标记为 `old-name` (e.g., `old-title`)。\n    - 新页面的元素（此时可能还未插入 DOM，或插入了但暂时隐藏/移出屏幕）标记为 `new-name` (e.g., `new-title`)，或者干脆先不加 `view-transition-name`。\n    - 在这个例子里，还需要特殊处理：旧标题 `old-title` 需要过渡到新页面的返回文字 `new-backText`，旧返回图标 `old-backIcon` 要过渡到新返回图标 `new-backIcon`。这涉及到更复杂的名字配对。\n\n2.  **`startViewTransition` 的回调函数内 (DOM 更新时)**:\n\n    - 这是最关键的一步，我们要“告诉”浏览器新旧元素的对应关系。\n    - 旧页面的元素可能要移除 `view-transition-name`，或者设置一个仅用于“离开动画”的名字。\n    - 新页面的元素，此时要正式赋予那个我们希望它**从旧状态过渡而来**的名字。\n      - 例如，在回调里，把旧标题的 `view-transition-name` 移除（或者让它准备滑走），同时把新页面的 _返回按钮文字_ (`backText`) 的 `view-transition-name` 设置为 `old-title`（这样它就会从旧标题的位置过渡过来）。\n      - 把旧返回图标 (`backIcon`) 的 `view-transition-name` 移除（可能伴随透明度变化），同时把新页面的 `backIcon` 的 `view-transition-name` 设置为 `old-backIcon`（让它看起来像是同一个元素）。\n      - 新页面的标题 (`title`) 则保持 `new-title`，它会执行自己的“进入”动画（比如从右滑入）。\n\n3.  **过渡结束后 (`transition.finished`)**:\n    - 清理工作。移除不再需要的旧页面 DOM。可能还需要清理掉临时设置的 `view-transition-name` 或样式。\n\n看下面这个简化的 JS 逻辑示意（完整代码参考你提供的链接）：\n\n```javascript\n// 简化示意逻辑\nclass ViewTransitionController {\n  // ... (省略获取元素等)\n\n  beforeStart() {\n    // 1. 准备阶段：获取新旧元素引用，准备新页面内容\n    // ...\n    this.oldEles = this.getEles(canvas.querySelector(\".page\"));\n    const newPageContent = tmp.content.cloneNode(true);\n    this.newEles = this.getEles(newPageContent);\n    this.updateText(); // 更新新页面的标题和返回文字内容\n    canvas.appendChild(newPageContent); // 将新页面添加到 DOM (可能先放在屏幕外)\n\n    // --- 关键：设置初始名字 ---\n    this.oldEles.page.style.viewTransitionName = \"page-old\";\n    this.oldEles.title.style.viewTransitionName = \"title-old\"; // 旧标题\n    this.oldEles.backIcon.style.viewTransitionName = \"backIcon-old\"; // 旧图标\n\n    this.newEles.page.style.viewTransitionName = \"page-new\"; // 新页面整体\n    this.newEles.title.style.viewTransitionName = \"title-new\"; // 新标题\n    // 新返回图标和文字先不给名字，或者给个临时的，避免冲突\n    this.newEles.page.classList.add(\"from-right\"); // 先放右边\n  }\n\n  doStart() {\n    // 2. DOM 更新回调：在这里“重新配对”名字\n    const { oldEles, newEles } = this;\n\n    // 旧元素处理（准备离开）\n    oldEles.page.classList.add(\"to-left\"); // 旧页面整体左滑\n    oldEles.title.style.viewTransitionName = \"\"; // 旧标题不再参与共享过渡，准备淡出或滑出\n    oldEles.backIcon.style.viewTransitionName = \"\"; // 旧图标也类似\n\n    // 新元素处理（准备进入和变形）\n    newEles.page.classList.remove(\"from-right\"); // 新页面移动到位置\n    newEles.backIcon.style.viewTransitionName = \"backIcon-old\"; // 新图标继承旧图标的名字，实现“不动”效果\n    newEles.backText.style.viewTransitionName = \"title-old\"; // 新返回文字继承旧标题的名字，实现“变形”效果\n    // newEles.title 保持 'title-new'，执行自己的进入动画\n    // 可能还需要配合 opacity 等样式变化\n  }\n\n  afterFinish() {\n    // 3. 清理阶段\n    this.oldEles.page.remove(); // 移除旧页面 DOM\n    // 可能还需要清理新元素上临时的 viewTransitionName\n  }\n}\n\n// 使用\nconst vtc = new ViewTransitionController();\nbtnPlay.addEventListener(\"click\", async () => {\n  vtc.beforeStart();\n  const vt = document.startViewTransition(vtc.doStart);\n  await vt.finished;\n  vtc.afterFinish();\n});\n```\n\n**小结**：在 SPA 中用 Level 1 实现复杂的多元素协调过渡，需要开发者手动管理 `view-transition-name` 的生命周期，模拟出跨“页面”共享元素的效果。这比声明式 UI 框架的写法要繁琐得多，心智负担也更重。\n\n## 二、深入 View Transitions 的限制与“脾气”\n\n除了 SPA 模拟带来的复杂性，View Transitions 本身也有一些特性或限制需要注意：\n\n1.  **渲染抑制 (Rendering Suppression)**\n\n    - **现象**：在 `startViewTransition` 被调用、快照生成后，直到过渡动画完成（`transition.finished` resolve），整个原始文档（除了 `::view-transition` 伪元素树）在视觉上是**不可见且不可交互**的。浏览器会暂停渲染常规内容，只渲染那个特殊的过渡层。\n    - **影响**：这意味着如果你的过渡动画时间较长，用户会有一段时间无法与页面进行任何交互（点击、滚动等）。即便你尝试用 `clip-path` 裁剪 `::view-transition` 伪元素，露出来的也不是底下的原始文档，而是一片空白（或浏览器的背景色）。\n    - **结论**：目前无法绕过渲染抑制。因此，View Transitions **不适合做长时间运行的动画**，否则会严重影响用户体验。动画时长应尽量控制在用户可接受的范围内（通常几百毫秒）。\n\n2.  **快照与元素上下文**\n\n    - **现象**：当一个元素被赋予 `view-transition-name` 后，浏览器为它拍快照时，可以理解为是把它暂时“抠”了出来。这个快照包含了元素自身及其子元素的渲染结果，但它在某种程度上**脱离了原始的布局上下文**。\n    - **影响**：\n      - **`overflow: hidden` 失效**：如果一个带名字的元素原本被父元素的 `overflow: hidden` 或 `clip-path` 裁剪了，在过渡动画中，这个裁剪效果可能会丢失，导致元素完整地显示出来，因为它被渲染在了更高层级的 `::view-transition-group` 中。你可能需要手动在 `::view-transition-group(name)` 或对应的 `old/new` 伪元素上重新应用 `clip-path` 来模拟裁剪，但这在元素平移时计算会变得复杂。\n      - **其他上下文相关的样式**：某些依赖于父级或兄弟元素的样式（比如特定的混合模式应用）可能在过渡中表现不一致。\n    - **建议**：为带名字的元素添加 `contain: layout;` 或类似属性（如 `contain: paint;`, `contain: strict;`, `content-visibility: hidden;`），可以帮助浏览器优化并减少意外情况，但不能完全解决上下文脱离的问题。\n\n3.  **CSS 自定义属性 (Custom Properties) 的作用域**\n    - **现象**：`::view-transition` 及其子伪元素位于一个非常高的渲染层级，并且它们的样式似乎与常规 DOM 的级联关系有些微妙。直接在 `:root` 或 `html`/`body` 上通过 `style.setProperty('--my-var', value)` 设置的自定义属性，**可能无法**直接在 `::view-transition-group(*)` 等伪元素的 CSS 规则中生效。\n    - **解决方案**：如果你需要在过渡动画中动态改变并在 CSS 中使用自定义属性（比如通过 JS 计算动画参数），目前看来比较可靠的方法是动态创建或修改 CSS 规则本身。例如：\n      - 创建一个 `<style>` 标签，动态写入包含自定义属性值的 CSS 规则。\n      - 使用 `document.adoptedStyleSheets` API，动态添加或修改包含这些规则的 `CSSStyleSheet` 对象。\n\n## 三、View Transitions 的适用场景与挑战\n\n了解了复杂性和限制后，哪些场景适合用，哪些场景要三思？\n\n1.  **启动屏幕 (Splash Screen)**\n\n    - **优势**：渲染抑制在这里反而是个优点。你可以在应用初始化、加载资源、准备首屏 DOM 的过程中，用 View Transitions 显示一个启动画面（比如 Logo 淡入淡出）。由于原始文档被抑制渲染和交互，正好符合启动阶段的需求。\n    - **代码结构**：\n      ```javascript\n      // 伪代码\n      prepareSplashScreenDOM(); // 先把启动屏DOM准备好\n      const vt = document.startViewTransition(async () => {\n        // 在这个回调里，异步加载应用资源、初始化状态、渲染主界面DOM\n        await loadAppResources();\n        await initialRender();\n        // DOM 准备好后，可以开始“关闭”启动屏的动画逻辑（比如让Logo飞走）\n        triggerSplashScreenExitAnimationLogic(); // 这部分逻辑可能是更新某些元素的name或样式\n      });\n      // 可选：监听 finished 后彻底移除启动屏DOM\n      vt.finished.then(removeSplashScreenDOM);\n      ```\n    - **挑战**：如果想做带有**加载进度条**的启动屏，会遇到前面提到的问题。简单的进度条（比如一个色块变长）可能还行，但如果进度条本身有复杂纹理或效果，View Transitions 默认的 bounds（边界框）动画可能会导致纹理拉伸变形。你需要：\n      - 将纹理独立为一个带 `view-transition-name` 的元素。\n      - 可能需要隐藏 DOM 元素的原始纹理，在 `::view-transition-group(texture)` 或 `::view-transition-new(texture)` 上重新绘制或应用纹理。\n      - 如果想实现平滑的进度更新动画，而不是简单的两点过渡，可能需要放弃 CSS 动画，在 `transition.ready` 后介入，使用 Web Animations API 精确控制 `::view-transition-new(progressBarValue)` 的 `clip-path` 或 `transform`。\n      - **结论**：对于复杂的、需要实时更新的加载动画，View Transitions 可能增加的复杂性远超其带来的便利，此时不如用传统 JS+CSS 动画方案。\n      - [progress demo by view-transition](https://appn.dwewb.com/examples/kitchen-sink/view-transition-demo-splash-screen/)\n\n2.  **简单的内容切换/卡片展开等**\n    - 对于不涉及复杂多元素协调、动画时长可控的场景，View Transitions 依然是很好的选择，比如列表项点击展开为详情、页面主体内容的简单淡入淡出或滑动切换。\n\n## 四、开发工具的那点事儿\n\n最后吐槽一下，目前的 Chrome DevTools 对 View Transitions 的调试支持有时会“抽风”：\n\n- **暂停问题**：在 Animations 面板暂停一个 View Transition 动画后，如果你切换到浏览器的其他标签页，或者切换到其他应用程序一会儿再回来，那个被暂停的 `::view-transition` 伪元素树有时会**直接消失**，导致无法继续单步调试或检查状态。\n- **原因猜测** 我猜是为了恢复 `::view-transition-root` 有关系。比如说，如果你在 view-transition 期间对页面进行 resize，整个 `::view-transition` 也会瞬间消失。因为需要恢复 `::view-transition-root` 元素去进行渲染计算。说白了就是 document.documentElement 的所有权需要归还。所以同样的。如果切换浏览器标签，或者切换应用，都会触发页面的生命周期，那么都需要归还 document.documentElement 的所有权。\n- **影响**：这给调试带来了不便，尤其是在需要频繁切换窗口查文档或对比效果时。\n\n希望未来的 DevTools 版本能改进这一点。\n\n## 总结与思考\n\nCSS View Transitions Level 1 无疑为 Web 带来了强大的原生级动画能力，尤其是在处理简单的状态切换时，能极大简化代码。但它并非银弹。\n\n- **核心优势**在于解耦了 DOM 更新和视觉过渡，让状态管理更清晰。\n- **核心挑战**在于其 Level 1 的设计基于单文档状态快照，当我们在 SPA 中模拟多页面流时，需要手动填补这种模式差异带来的沟壑，尤其是对 `view-transition-name` 的精细管理。\n- **局限性**（如渲染抑制、快照上下文问题）也决定了它不适用于所有动画场景，特别是长耗时或需要高度交互保障的过渡。\n\n对于简单的、符合其设计模型的场景，大胆用，享受它带来的便利。\n对于复杂的、尤其是试图在 SPA 中复刻原生多页面导航细节的场景，请**仔细评估**引入它的成本（代码复杂性、潜在的限制）是否值得。\n有时候，传统的 JS 动画库或纯 CSS 动画可能仍然是更灵活或更稳妥的选择。\n"}}}