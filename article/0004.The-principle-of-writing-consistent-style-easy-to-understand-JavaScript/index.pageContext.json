{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"0004.The-principle-of-writing-consistent-style-easy-to-understand-JavaScript"},"data":{"article":{"fileEntry":{"path":"/home/runner/work/gaubee.com/gaubee.com/articles/0004.The-principle-of-writing-consistent-style-easy-to-understand-JavaScript.md","options":{"cwd":"/home/runner/work/gaubee.com/gaubee.com/articles"},"isFile":true,"isDirectory":false},"originMetadata":{"layout":"layouts/article.njk","title":"【转、修】书写具备一致风格、通俗易懂 JavaScript 的原则","date":"!Date:2013-05-10T15:24:20.000Z","updated":"!Date:2013-05-10T15:25:04.000Z","tags":["javascript"]},"metadata":{"layout":"layouts/article.njk","title":"【转、修】书写具备一致风格、通俗易懂 JavaScript 的原则","date":"!Date:2013-05-10T15:24:20.000Z","updated":"!Date:2013-05-10T15:25:04.000Z","tags":["javascript"],"id":"0004.The-principle-of-writing-consistent-style-easy-to-understand-JavaScript","createdAt":"!Date:2013-05-10T15:24:20.000Z","updatedAt":"!Date:2013-05-10T15:25:04.000Z"},"htmlContent":"<h1>书写具备一致风格、通俗易懂 JavaScript 的原则</h1>\n<p><strong><a href=\"https://github.com/rwldrn/idiomatic.js/blob/master/translations/zh_CN/readme.md\">原文地址</a></strong></p>\n<hr>\n<blockquote>\n<p>无论有多少人在维护，所有在代码仓库中的代码理应看起来像同一个人写的。</p>\n<p>下面的清单概括了我作为原作者的所有代码中使用的实践。在我创建的项目中的所有构建代码都必须遵循这些规则。</p>\n<p>我并不想强制别人在其代码或项目中使用我个人所偏好的代码风格；如果已经存在一个通用编码规范，它必须受到尊崇。</p>\n<p><strong>\"对风格的挑刺毫无意义可言。它们必须是指导原则，且你必须遵循。\"</strong></p>\n<p>-- <em>Rebecca Murphey</em></p>\n<p><strong>\"成为一个优秀的成功项目管理者的一个条件是，明白按自己的偏好风格写代码是非常不好的做法。如果成千上万的人都在使用你的代码，那么请尽可能通俗易懂地写出你的代码，而非在规范之下自作聪明地使用自己偏好的风格。\"</strong></p>\n<p>-- <em>Idan Gazit</em></p>\n</blockquote>\n<hr>\n<h2>翻译版本</h2>\n<ul>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/\">ORIGINAL</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/de_DE\">German</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/fr_FR\">French</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/es_ES\">Spanish</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/pt_BR\">Portuguese - Brazil</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/ko_KR\">Korean</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/ja_JP\">Japanese</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/it_IT\">Italian</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/ru_RU\">Russian</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/ro_RO\">Romanian</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/zh_CN\">简体中文</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/%D1%81%D1%80_%D0%A1%D0%A0\">Serbian - cyrilic alphabet</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/tree/master/translations/sr_SR\">Serbian - latin aplphabet</a></li>\n</ul>\n<h2>重要，非常通用资源：</h2>\n<h3>代码质量工具、资源和文献</h3>\n<ul>\n<li><a href=\"http://docs.codehaus.org/display/SONAR/JavaScript+Plugin\">JavaScript Plugin</a> for <a href=\"http://www.sonarsource.org/\">Sonar</a></li>\n<li><a href=\"http://jsperf.com/\">jsPerf</a></li>\n<li><a href=\"http://jsfiddle.net/\">jsFiddle</a></li>\n<li><a href=\"http://jsbin.com/\">jsbin</a></li>\n<li><a href=\"http://javascriptlint.com/\">JavaScript Lint (JSL)</a></li>\n<li><a href=\"http://jshint.com/\">jshint</a></li>\n<li><a href=\"http://jslint.org/\">jslint</a></li>\n</ul>\n<h2>变聪明点</h2>\n<h3><a href=\"http://es5.github.com/\">ECMAScript 5.1 注解版</a></h3>\n<h3><a href=\"http://ecma-international.org/ecma-262/5.1/\">EcmaScript 语言规范, 5.1 版</a></h3>\n<p>下列文档的现实是：1）不完全版，2）<em>必读</em>。我并不全（不总是，always agree）赞同下列所有作者所写的风格，但有一点可以确定的是：他们具备一致性。除此之外，他们还都是这门语言的权威人士。</p>\n<ul>\n<li><a href=\"http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/\">Baseline For Front End Developers</a></li>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/\">JavaScript, JavaScript</a></li>\n<li><a href=\"http://rmurphey.com/\">Adventures in JavaScript Development</a></li>\n<li><a href=\"http://perfectionkills.com/\">Perfection Kills</a></li>\n<li><a href=\"http://www.crockford.com\">Douglas Crockford's Wrrrld Wide Web</a></li>\n<li><a href=\"https://github.com/rmurphey/js-assessment\">JS Assessment</a></li>\n<li><a href=\"http://anton.kovalyov.net/slides/gothamjs/\">Leveraging Code Quality Tools by Anton Kovalyov</a></li>\n</ul>\n<h3>编译和部署</h3>\n<p>项目必须总是提供一些通用的方法来检验（can be linted）、测试和压缩源码以为产品阶段使用做准备。对于此类工作 Ben Alman 所写的 <a href=\"https://github.com/cowboy/grunt\">grunt</a> 可谓首屈一指，并已替代这个仓库的 “kits/” 目录作官方工具。</p>\n<h3>测试工具</h3>\n<p>项目 <em>必须</em> 包括某此类型的单元、引用、实现或者功能性测试。使用代码示例并不足以称为“测试”。下面是一系列测试框架，他们只代表自己（谁都不是谁的更好替代品，which are endorsed more than the other）。</p>\n<ul>\n<li><a href=\"http://github.com/jquery/qunit\">QUnit</a></li>\n<li><a href=\"https://github.com/pivotal/jasmine\">Jasmine</a></li>\n<li><a href=\"https://github.com/cloudhead/vows\">Vows</a></li>\n<li><a href=\"https://github.com/visionmedia/mocha\">Mocha</a></li>\n<li><a href=\"http://hirojs.com/\">Hiro</a></li>\n<li><a href=\"https://code.google.com/p/js-test-driver/\">JsTestDriver</a></li>\n<li><a href=\"http://busterjs.org/\">Buster.js</a></li>\n<li><a href=\"http://sinonjs.org/\">Sinon.js</a></li>\n</ul>\n<h2>目录</h2>\n<ul>\n<li><a href=\"#whitespace\">Whitespace</a></li>\n<li><a href=\"#spacing\">Beautiful Syntax</a></li>\n<li><a href=\"#type\">Type Checking (Courtesy jQuery Core Style Guidelines)</a></li>\n<li><a href=\"#cond\">Conditional Evaluation</a></li>\n<li><a href=\"#practical\">Practical Style</a></li>\n<li><a href=\"#naming\">Naming</a></li>\n<li><a href=\"#misc\">Misc</a></li>\n<li><a href=\"#native\">Native &#x26; Host Objects</a></li>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#language\">One Language Code</a></li>\n</ul>\n<hr>\n<h2>前言</h2>\n<p>下面的章节描述的是一个 <em>合理</em> 的现代 JavaScript 开发风格指南，并非硬性规定。其想送出的核心理念是_高度统一的代码风格_（the law of code style consistency）。你为项目所择风格都应为最高准则。作为一个描述放置于你的项目中，并链接到这个文档作为代码风格一致性、可读性和可维护性的保证。</p>\n<h2>Idiomatic 风格宣言</h2>\n<ol>\n<li>\n<p><a name=\"whitespace\">空白</a></p>\n<ul>\n<li>永远都不要混用\b空格和Tab。</li>\n<li>开始一个项目，在写代码之前，选择软缩进（空格）或者 Tab（作为缩进方式），并将其作为<strong>最高准则</strong>。\n<ul>\n<li>为了可读, 我总是推荐在你的编辑中设计2个字母宽度的缩进 — 这等同于两个空格或者两个空格替代一个 Tab。</li>\n</ul>\n</li>\n<li>如果你的编辑器支持，请总是打开 “显示不可见字符” 这个设置。好处是：\n<ul>\n<li>保证一致性\n<ul>\n<li>去掉行末的空格</li>\n<li>去掉空行的空格</li>\n<li>提交和对比更具可读性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a name=\"spacing\">美化语法</a></p>\n<p><strong>A. 小括号, 花括号, 换行</strong></p>\n<pre><code class=\"language-javascript\">\n    // if/else/for/while/try 通常都有小括号、花括号和多行\n    // 这有助于可读\n\n    // 2.A.1.1\n    // 难辨语法（cramped syntax）的例子\n    if(condition) doSomething();\n    while(condition) iterating++;\n    for(var i=0;i&#x3C;100;i++) someIterativeFn();\n\n    // 2.A.1.1\n    // 使用空格来提升可读性\n    if (condition) {\n        // 语句\n    }\n    while (condition) {\n        // 语句\n    }\n    for (var i = 0; i &#x3C; 100; i++) {\n        // 语句\n    }\n\n    // 更好的做法:\n    var i,\n    length = 100;\n    for (i = 0; i &#x3C; length; i++) {\n        // 语句\n    }\n\n    // 或者...\n    var i = 0,\n        length = 100;\n    for (; i &#x3C; length; i++) {\n        // 语句\n    }\n    var prop;\n    for (prop in object) {\n        // 语句\n    }\n    if (true) {\n        // 语句\n    } else {\n        // 语句\n    }\n\n</code></pre>\n<p><strong>B. 赋值, 声明, 函数 ( 命名函数, 函数表达式, 构建函数 )</strong></p>\n<pre><code class=\"language-javascript\">\n    // 2.B.1.1\n    // 变量\n    var foo = \"bar\",\n        num = 1,\n        undef;\n\n    // 字面量标识:\n    var array = [],\n        object = {};\n\n    // 2.B.1.2\n    // 在一个作用域（函数）内只使用一个 `var` 有助于提升可读性\n    // 并且让你的声明列表变得有条不紊 (还帮你省了几次键盘敲击)\n\n    // 不好\n    var foo = \"\";\n    var bar = \"\";\n    var qux;\n\n    // 好\n    var foo = \"\",\n        bar = \"\",\n        quux;\n\n    // 或者..\n    var // 对这些变量的注释\n    foo = \"\",\n        bar = \"\",\n        quux;\n\n    // 2.B.1.3\n    // `var` 语句必须总是在各自作用域（函数）顶部\n    // 同样适应于来自 ECMAScript 6 的常量\n\n    // 不好\n\n    function foo() {\n\n        // 在变量前有语句\n\n        var bar = \"\",\n            qux;\n    }\n\n    // 好\n\n    function foo() {\n        var bar = \"\",\n         qux;\n\n         // 所有语句都在变量之后\n    }\n\n</code></pre>\n<pre><code class=\"language-javascript\">\n    // 2.B.2.1\n    // 命名函数声明\n\n    function foo(arg1, argN) {\n\n    }\n\n    // 使用方法\n    foo(arg1, argN);\n\n    // 2.B.2.2\n    // 命名函数声明\n\n    function square(number) {\n        return number * number;\n    }\n\n    // 使用方法\n    square(10);\n\n    // 非常不自然的连带传参（continuation passing）风格\n\n    function square(number, callback) {\n        callback(number * number);\n    }\n\n    square(10, function(square) {\n        // 回调内容\n    });\n\n    // 2.B.2.3\n    // 函数表达式\n    var square = function(number) {\n        // 返回有价值的、相关的内容\n        return number * number;\n    };\n\n    // 带标识符的函数表达式\n    // 这种首选形式有附加的功能让其可以调用自身\n    // 并且在堆栈中有标识符\n    var factorial = function factorial(number) {\n        if (number &#x3C; 2) {\n            return 1;\n        }\n\n        return number * factorial(number - 1);\n    };\n\n    // 2.B.2.4\n    // 构造函数声明\n\n    function FooBar(options) {\n\n        this.options = options;\n    }\n\n    // 使用方法\n    var fooBar = new FooBar({\n        a: \"alpha\"\n    });\n\n    fooBar.options;\n    // { a: \"alpha\" }\n\n\n</code></pre>\n<p><strong>C. 异常, 细节</strong></p>\n<pre><code class=\"language-javascript\">\n    // 2.C.1.1\n    // 带回调的函数\n    foo(function() {\n        // 注意：在第一函数调用的小括号和 `function` 处并没有空格\n    });\n\n    // 函数接受 `array` 作为参数，没有空格\n    foo([\"alpha\", \"beta\"]);\n\n    // 2.C.1.2\n    // 函数接受 `object` 作为参数，没有空格\n    foo({\n        a: \"alpha\",\n        b: \"beta\"\n    });\n\n    // 函数接受 `string` 字面量作为参数，没有空格\n    foo(\"bar\");\n\n    // 分组用的小括号内部，没有空格\n    if (!(\"foo\" in obj)) {\n\n    }\n\n</code></pre>\n<p><strong>D. 一致性（统一）总是笑到最后的（Consistency Always Wins）</strong></p>\n<p>在 2.A-2.C 节，留白作为一个推荐方式被提出，基于单纯的、更高的目的：统一。值得注意的是格式化偏好，像“内部留白”必须是可选的，但在整个项目的源码中必须只存在着一种。</p>\n<pre><code class=\"language-javascript\">\n    // 2.D.1.1\n\n    if (condition) {\n        // 语句\n    }\n\n    while (condition) {\n        // 语句\n    }\n\n    for (var i = 0; i &#x3C; 100; i++) {\n        // 语句\n    }\n\n    if (true) {\n        // 语句\n    } else {\n        // 语句\n    }\n</code></pre>\n<p><strong>E. 引号</strong></p>\n<p>无论你选择单引号还是双引号都无所谓，在 JavaScript 中它们在解析上没有区别。而<strong>绝对需要</strong>强制的是一致性。 <strong>永远不要在同一个项目中混用两种引号，选择一种，并保持一致</strong>。</p>\n<p><strong>F. 行末和空行</strong></p>\n<p>留白会破坏区别并使用变更不可读。考虑包括一个预提交的 hook 自动删除行末和空行中的空格。</p>\n</li>\n<li>\n<p><a name=\"type\">类型检测 (来源于 jQuery Core Style Guidelines)</a></p>\n<p><strong>A. 直接类型（实际类型，Actual Types）</strong></p>\n<p>String:</p>\n<pre><code>typeof variable === \"string\"\n</code></pre>\n<p>Number:</p>\n<pre><code>typeof variable === \"number\"\n</code></pre>\n<p>Boolean:</p>\n<pre><code>typeof variable === \"boolean\"\n</code></pre>\n<p>Object:</p>\n<pre><code>typeof variable === \"object\"\n</code></pre>\n<p>Array:</p>\n<pre><code>Array.isArray( arrayLikeObject )\n(如果可能的话)\n</code></pre>\n<p>Node:</p>\n<pre><code>elem.nodeType === 1\n</code></pre>\n<p>null:</p>\n<pre><code>variable === null\n</code></pre>\n<p>null or undefined:</p>\n<pre><code>variable == null\n</code></pre>\n<p>undefined:</p>\n<pre><code>全局变量:\n\ntypeof variable === \"undefined\"\n\n局部变量:\n\nvariable === undefined\n\n属性:\n\nobject.prop === undefined\nobject.hasOwnProperty( prop )\n\"prop\" in object\n</code></pre>\n<p><strong>B. 转换类型（强制类型，Coerced Types）</strong></p>\n<p>考虑下面这个的含义...</p>\n<p>给定的 HTML:</p>\n<pre><code class=\"language-html\">\n    &#x3C;input type=\"text\" id=\"foo-input\" value=\"1\">\n\n</code></pre>\n<pre><code class=\"language-javascript\">\n    // 3.B.1.1\n\n    // `foo` 已经被赋予值 `0`，类型为 `number`\n    var foo = 0;\n\n    // typeof foo;\n    // \"number\"\n\n    // 在后续的代码中，你需要更新 `foo`，赋予在 input 元素中得到的新值\n\n    foo = document.getElementById(\"foo-input\").value;\n\n    // 如果你现在测试 `typeof foo`, 结果将是 `string`\n    // 这意味着你在 if 语句检测 `foo` 有类似于此的逻辑:\n\n    if (foo === 1) {\n        importantTask();\n    }\n\n    // `importantTask()` 将永远不会被执行，即使 `foo` 有一个值 \"1\"\n\n    // 3.B.1.2\n\n    // 你可以巧妙地使用 + / - 一元运算符强制转换类型以解决问题:\n\n    foo = +document.getElementById(\"foo-input\").value;\n    //  ^ + 一元运算符将它右边的运算对象转换为 `number`\n\n    // typeof foo;\n    // \"number\"\n\n    if (foo === 1) {\n        importantTask();\n    }\n\n    // `importantTask()` 将被调用\n\n</code></pre>\n<p>对于强制类型转换这里有几个例子:</p>\n<pre><code class=\"language-javascript\">\n    // 3.B.2.1\n\n    var number = 1,\n        string = \"1\",\n        bool = false;\n\n    number;\n    // 1\n\n    number + \"\";\n    // \"1\"\n\n    string;\n    // \"1\"\n\n    +\n    string;\n    // 1\n\n    +\n    string++;\n    // 1\n\n    string;\n    // 2\n\n    bool;\n    // false\n\n    +bool;\n    // 0\n\n    bool + \"\";\n    // \"false\"\n\n</code></pre>\n<pre><code class=\"language-javascript\">    // 3.B.2.2\n\n    var number = 1,\n        string = \"1\",\n        bool = true;\n\n    string === number;\n    // false\n\n    string === number + \"\";\n    // true\n\n    +string === number;\n    // true\n\n    bool === number;\n    // false\n\n    +bool === number;\n    // true\n\n    bool === string;\n    // false\n\n    bool === !!string;\n    // true\n</code></pre>\n<pre><code class=\"language-javascript\">    // 3.B.2.3\n\n    var array = [ \"a\", \"b\", \"c\" ];\n\n    !!~array.indexOf(\"a\");\n    // true\n\n    !!~array.indexOf(\"b\");\n    // true\n\n    !!~array.indexOf(\"c\");\n    // true\n\n    !!~array.indexOf(\"d\");\n    // false\n\n    // 值得注意的是上述都是 \"不必要的聪明\"\n    // 采用明确的方案来比较返回的值\n    // 如 indexOf：\n\n    if ( array.indexOf( \"a\" ) >= 0 ) {\n        // ...\n    }\n</code></pre>\n<pre><code class=\"language-javascript\">\n    // 3.B.2.3\n\n    var num = 2.5;\n    parseInt(num, 10);\n    // 等价于...\n    ~~num;\n    num >> 0;\n    num >>> 0;\n    // 结果都是 2\n    // 时刻牢记心底, 负值将被区别对待...\n    var neg = -2.5;\n    parseInt(neg, 10);\n    // 等价于...\n    ~~neg;\n    neg >> 0;\n    // 结果都是 -2\n    // 但是...\n    neg >>> 0;\n    // 结果即是 4294967294\n\n</code></pre>\n</li>\n<li>\n<p><a name=\"cond\">对比运算</a></p>\n<pre><code class=\"language-javascript\">\n    // 4.1.1\n    // 当只是判断一个 array 是否有长度，相对于使用这个:\n    if ( array.length > 0 ) ...\n\n    // ...判断真伪, 请使用这种:\n    if ( array.length ) ...\n\n    // 4.1.2\n    // 当只是判断一个 array 是否为空，相对于使用这个:\n    if ( array.length === 0 ) ...\n\n    // ...判断真伪, 请使用这种:\n    if ( !array.length ) ...\n\n    // 4.1.3\n    // 当只是判断一个 string 是否为空，相对于使用这个:\n    if ( string !== \"\" ) ...\n\n    // ...判断真伪, 请使用这种:\n    if ( string ) ...\n\n    // 4.1.4\n    // 当只是判断一个 string 是为空，相对于使用这个:\n    if ( string === \"\" ) ...\n\n    // ...判断真伪, 请使用这种:\n    if ( !string ) ...\n\n    // 4.1.5\n    // 当只是判断一个引用是为真，相对于使用这个:\n    if ( foo === true ) ...\n\n    // ...判断只需像你所想，享受内置功能的好处:\n    if ( foo ) ...\n\n    // 4.1.6\n    // 当只是判断一个引用是为假，相对于使用这个:\n    if ( foo === false ) ...\n\n    // ...使用叹号将其转换为真\n    if ( !foo ) ...\n\n    // ...需要注意的是：这个将会匹配 0, \"\", null, undefined, NaN\n    // 如果你 _必须_ 是布尔类型的 false，请这样用：\n    if ( foo === false ) ...\n\n    // 4.1.7\n    // 如果想计算一个引用可能是 null 或者 undefined，但并不是 false, \"\" 或者 0,\n    // 相对于使用这个：\n    if ( foo === null || foo === undefined ) ...\n\n    // ...享受 == 类型强制转换的好处，像这样:\n    if ( foo == null ) ...\n\n    // 谨记，使用 == 将会令 `null` 匹配 `null` 和 `undefined`\n    // 但不是 `false`，\"\" 或者 0\n    null == undefined\n\n</code></pre>\n<p>总是判断最好、最精确的值，上述是指南而非教条。</p>\n<pre><code class=\"language-javascript\">\n    // 4.2.1\n    // 类型转换和对比运算说明\n\n    // 首次 `===`，`==` 次之 (除非需要松散类型的对比)\n\n    // `===` 总不做类型转换，这意味着:\n\n    \"1\" === 1;\n    // false\n\n    // `==` 会转换类型，这意味着:\n\n    \"1\" == 1;\n    // true\n\n    // 4.2.2\n    // 布尔, 真 &#x26; 伪\n\n    // 布尔:\n    true, false\n\n    // 真:\n    \"foo\", 1\n\n    // 伪:\n    \"\", 0, null, undefined, NaN, void 0\n\n</code></pre>\n</li>\n<li>\n<p><a name=\"practical\">实用风格</a></p>\n<pre><code class=\"language-javascript\">\n    // 5.1.1\n    // 一个实用的模块\n\n    (function(global) {\n        var Module = (function() {\n            var data = \"secret\";\n            return {\n                // 这是一个布尔值\n                bool: true,\n                // 一个字符串\n                string: \"a string\",\n                // 一个数组\n                array: [1, 2, 3, 4],\n                // 一个对象\n                object: {\n                    lang: \"en-Us\"\n                },\n                getData: function() {\n                    // 得到 `data` 的值\n                    return data;\n                },\n                setData: function(value) {\n                    // 返回赋值过的 `data` 的值\n                    return (data = value);\n                }\n            };\n        })();\n        // 其他一些将会出现在这里\n        // 把你的模块变成全局对象\n        global.Module = Module;\n    })(this);\n\n</code></pre>\n<pre><code class=\"language-javascript\">\n    // 5.2.1\n    // 一个实用的构建函数\n\n    (function(global) {\n        function Ctor(foo) {\n            this.foo = foo;\n            return this;\n        }\n        Ctor.prototype.getFoo = function() {\n            return this.foo;\n        };\n        Ctor.prototype.setFoo = function(val) {\n            return (this.foo = val);\n        };\n        // 不使用 `new` 来调用构建函数，你可能会这样做：\n        var ctor = function(foo) {\n            return new Ctor(foo);\n        };\n        // 把我们的构建函数变成全局对象\n        global.ctor = ctor;\n    })(this);\n\n</code></pre>\n</li>\n<li>\n<p><a name=\"naming\">命名</a></p>\n<p><strong>A. 你并不是一个人肉 编译器/压缩器，所以尝试去变身为其一。</strong></p>\n<p>下面的代码是一个极糟命名的典范:</p>\n<pre><code class=\"language-javascript\">\n    // 6.A.1.1\n    // 糟糕命名的示例代码\n\n    function q(s) {\n        return document.querySelectorAll(s);\n    }\n    var i,a=[],els=q(\"#foo\");\n    for(i=0;i&#x3C;els.length;i++){a.push(els[i]);}\n</code></pre>\n<p>毫无疑问，你写过这样的代码 —— 希望从今天它不再出现。</p>\n<p>这里有一份相同逻辑的代码，但拥有更健壮、贴切的命名（和一个可读的结构）：</p>\n<pre><code class=\"language-javascript\">\n// 6.A.2.1\n// 改善过命名的示例代码\n\n    function query(selector) {\n        return document.querySelectorAll(selector);\n    }\n\n    var idx = 0,\n        elements = [],\n        matches = query(\"#foo\"),\n        length = matches.length;\n\n    for (; idx &#x3C; length; idx++) {\n        elements.push(matches[idx]);\n    }\n\n</code></pre>\n<p>一些额外的命名提示：</p>\n<pre><code class=\"language-javascript\">\n    // 6.A.3.1\n    // 命名字符串\n\n    `dog` 是一个 string\n\n    // 6.A.3.2\n    // 命名 arrays\n\n    `['dogs']` 是一个包含 `dog 字符串的 array\n\n    // 6.A.3.3\n    // 命名函数、对象、实例，等\n\n    camlCase; function 和 var 声明\n\n    // 6.A.3.4\n    // 命名构建器、原型，等\n\n    PascalCase; 构建函数\n\n    // 6.A.3.5\n    // 命名正则表达式\n\n    rDesc = //;\n\n    // 6.A.3.6\n    // 来自 Google Closure Library Style Guide\n\n    functionNamesLikeThis;\n    variableNamesLikeThis;\n    ConstructorNamesLikeThis;\n    EnumNamesLikeThis;\n    methodNamesLikeThis;\n    SYMBOLIC_CONSTANTS_LIKE_THIS;\n\n</code></pre>\n<p><strong>B. 面对 <code>this</code></strong></p>\n<p>除使用众所周知的 <code>call</code> 和 <code>apply</code> 外，总是优先选择 <code>.bind( this )</code> 或者一个功能上等价于它的。创建 <code>BoundFunction</code> 声明供后续调用，当没有更好的选择时才使用别名。</p>\n<pre><code class=\"language-javascript\">    // 6.B.1\n\n    function Device(opts) {\n        this.value = null;\n        // 新建一个异步的 stream，这个将被持续调用\n        stream.read(opts.path, function(data) {\n            // 使用 stream 返回 data 最新的值，更新实例的值\n            this.value = data;\n        }.bind(this));\n        // 控制事件触发的频率\n        setInterval(function() {\n            // 发出一个被控制的事件\n            this.emit(\"event\");\n        }.bind(this), opts.freq || 100);\n    }\n    // 假设我们已继承了事件发送器（EventEmitter） ;)\n</code></pre>\n<p>当不能运行时，等价于 <code>.bind</code> 的功能在多数现代 JavaScript 库中都有提供。</p>\n<pre><code class=\"language-javascript\">    // 6.B.2\n\n    // 示例：lodash/underscore，_.bind()\n    function Device(opts) {\n        this.value = null;\n        stream.read(opts.path, _.bind(function(data) {\n            this.value = data;\n        }, this));\n\n        setInterval(_.bind(function() {\n            this.emit(\"event\");\n        }, this), opts.freq || 100);\n    }\n\n    // 示例：jQuery.proxy\n\n    function Device(opts) {\n        this.value = null;\n        stream.read(opts.path, jQuery.proxy(function(data) {\n            this.value = data;\n        }, this));\n\n        setInterval(jQuery.proxy(function() {\n            this.emit(\"event\");\n        }, this), opts.freq || 100);\n    }\n\n    // 示例：dojo.hitch\n    function Device(opts) {\n        this.value = null;\n        stream.read(opts.path, dojo.hitch(this, function(data) {\n            this.value = data;\n        }));\n        setInterval(dojo.hitch(this, function() {\n            this.emit(\"event\");\n        }), opts.freq || 100);\n    }\n\n</code></pre>\n<p>提供一个候选，创建一个 <code>this</code> 的别名，以 <code>self</code> 作为标识符。这很有可能出 bug，应尽可能避免。</p>\n<pre><code class=\"language-javascript\">\n// 6.B.3\n\nfunction Device( opts ) {\n    var self = this;\n\n    this.value = null;\n\n    stream.read( opts.path, function( data ) {\n\n    self.value = data;\n\n    });\n\n    setInterval(function() {\n\n    self.emit(\"event\");\n\n    }, opts.freq || 100 );\n}\n\n</code></pre>\n<p><strong>C. 使用 <code>thisArg</code></strong></p>\n<p>好几个 ES 5.1 中的原型的方法都内置了一个特殊的 <code>thisArg</code> 标记，尽可能多地使用它</p>\n<pre><code class=\"language-javascript\">\n    // 6.C.1\n\n    var obj;\n    obj = {\n        f: \"foo\",\n        b: \"bar\",\n        q: \"qux\"\n    };\n    Object.keys(obj).forEach(function(key) {\n        // |this| 现在是 `obj`\n        console.log(this[key]);\n    }, obj); // &#x3C;-- 最后的参数是 `thisArg`\n    // 打印出来...\n    // \"foo\"\n    // \"bar\"\n    // \"qux\"\n\n</code></pre>\n<p><code>thisArg</code> 在 <code>Array.prototype.every</code>、 <code>Array.prototype.forEach</code>、 <code>Array.prototype.some</code>、 <code>Array.prototype.map</code>、 <code>Array.prototype.filter</code> 中都可以使用。</p>\n</li>\n<li>\n<p><a name=\"misc\">Misc</a></p>\n<p>这个部分将要说明的想法和理念都并非教条。相反更鼓励对现存实践保持好奇，以尝试提供完成一般 JavaScript 编程任务的更好方案。</p>\n<p><strong>A. 避免使用 <code>switch</code>，现代方法跟踪（method tracing）将会把带有 switch 表达式的函数列为黑名单。</strong></p>\n<p>似乎在最新版本的 Firefox 和 Chrome 都对 <code>switch</code> 语句有重大改进。<a href=\"http://jsperf.com/switch-vs-object-literal-vs-module\">http://jsperf.com/switch-vs-object-literal-vs-module</a></p>\n<p>值得注意的是，改进可以这里看到:\n<a href=\"https://github.com/rwldrn/idiomatic.js/issues/13\">https://github.com/rwldrn/idiomatic.js/issues/13</a></p>\n<pre><code class=\"language-javascript\">    // 7.A.1.1\n    // switch 语句示例\n\n    switch (foo) {\n        case \"alpha\":\n            alpha();\n            break;\n        case \"beta\":\n            beta();\n            break;\n        default:\n            // 默认分支\n            break;\n    }\n\n    // 7.A.1.2\n    // 一个可支持组合、重用的方法是使用一个对象来存储 “cases”，\n    // 使用一个 function 来做委派：\n\n    var cases, delegator;\n\n    // 返回值仅作说明用\n    cases = {\n        alpha: function() {\n            // 语句\n            // 一个返回值\n            return [\"Alpha\", arguments.length];\n        },\n        beta: function() {\n            // 语句\n            // 一个返回值\n            return [\"Beta\", arguments.length];\n        },\n        _default: function() {\n            // 语句\n            // 一个返回值\n            return [\"Default\", arguments.length];\n        }\n    };\n\n    delegator = function() {\n        var args, key, delegate;\n\n        // 把 `argument` 转换成数组\n        args = [].slice.call(arguments);\n\n        // 从 `argument` 中抽出最前一个值\n        key = args.shift();\n\n        // 调用默认分支\n        delegate = cases._default;\n\n        // 从对象中对方法进行委派操作\n        if (cases.hasOwnProperty(key)) {\n            delegate = cases[key];\n        }\n\n        // arg 的作用域可以设置成特定值，\n        // 这种情况下，|null| 就可以了\n        return delegate.apply(null, args);\n    };\n\n    // 7.A.1.3\n    // 使用 7.A.1.2 中的 API:\n\n    delegator(\"alpha\", 1, 2, 3, 4, 5);\n    // [ \"Alpha\", 5 ]\n\n    // 当然 `case` key 的值可以轻松地换成任意值\n\n    var caseKey, someUserInput;\n\n    // 有没有可能是某种形式的输入?\n    someUserInput = 9;\n\n    if (someUserInput > 10) {\n        caseKey = \"alpha\";\n    } else {\n        caseKey = \"beta\";\n    }\n\n    // 或者...\n\n    caseKey = someUserInput > 10 ? \"alpha\" : \"beta\";\n\n    // 然后...\n\n    delegator(caseKey, someUserInput);\n    // [ \"Beta\", 1 ]\n\n    // 当然还可以这样搞...\n\n    delegator();\n    // [ \"Default\", 0 ]\n\n</code></pre>\n<p><strong>B. 提前返回值提升代码的可读性并且没有太多性能上的差别</strong></p>\n<pre><code class=\"language-javascript\">\n    // 7.B.1.1\n    // 不好:\n\n    function returnLate(foo) {\n        var ret;\n        if (foo) {\n            ret = \"foo\";\n        } else {\n            ret = \"quux\";\n        }\n        return ret;\n    }\n\n    // 好:\n\n    function returnEarly(foo) {\n\n        if (foo) {\n            return \"foo\";\n        }\n        return \"quux\";\n    }\n\n</code></pre>\n</li>\n<li>\n<p><a name=\"native\">原生 &#x26; 宿主对象（注：其实一直觉得 Host Objects 真不应该翻译过来，这是就按一般书的写法翻出来吧）</a></p>\n<p>最基本的原则是:</p>\n<p><strong>不要干任何蠢事，事情总会变好的</strong></p>\n<p>为了加强这个观念，请观看这个演示:</p>\n<p><strong>“一切都被允许: 原生扩展” by Andrew Dupont (JSConf2011, Portland, Oregon)</strong></p>\n<iframe src=\"http://blip.tv/play/g_Mngr6LegI.html\" width=\"480\" height=\"346\" frameborder=\"0\" allowfullscreen></iframe><embed type=\"application/x-shockwave-flash\" src=\"http://a.blip.tv/api.swf#g_Mngr6LegI\" style=\"display:none\"></embed>\n<p><a href=\"http://blip.tv/jsconf/jsconf2011-andrew-dupont-everything-is-permitted-extending-built-ins-5211542\">http://blip.tv/jsconf/jsconf2011-andrew-dupont-everything-is-permitted-extending-built-ins-5211542</a></p>\n</li>\n<li>\n<p><a name=\"comments\">注释</a></p>\n<ul>\n<li>单行注释放于代码上方为首选</li>\n<li>多行也可以</li>\n<li>行末注释应被避免!</li>\n<li>JSDoc 的方式也不错，但需要比较多的时间</li>\n</ul>\n</li>\n<li>\n<p><a name=\"language\">单用一门语言</a></p>\n<p>无论是什么语言程序维护者（或团队）规定使用何种语言，程序都应只用同一种语言书写。</p>\n</li>\n</ol>\n<h2>附录</h2>\n<h3>前置逗号（Comma First）</h3>\n<p>所有使用这个文档作为基本风格指南的项目都不允许前置逗号的代码格式，除非明确指定或者作者要求。</p>\n<p><strong>2013/5/10 23:18:10</strong></p>","markdownContent":"\n# 书写具备一致风格、通俗易懂 JavaScript 的原则\n\n**[原文地址](https://github.com/rwldrn/idiomatic.js/blob/master/translations/zh_CN/readme.md)**\n\n---\n\n> 无论有多少人在维护，所有在代码仓库中的代码理应看起来像同一个人写的。\n> \n> 下面的清单概括了我作为原作者的所有代码中使用的实践。在我创建的项目中的所有构建代码都必须遵循这些规则。\n> \n> 我并不想强制别人在其代码或项目中使用我个人所偏好的代码风格；如果已经存在一个通用编码规范，它必须受到尊崇。\n> \n> **\"对风格的挑刺毫无意义可言。它们必须是指导原则，且你必须遵循。\"**\n> \n> -- _Rebecca Murphey_\n> \n> **\"成为一个优秀的成功项目管理者的一个条件是，明白按自己的偏好风格写代码是非常不好的做法。如果成千上万的人都在使用你的代码，那么请尽可能通俗易懂地写出你的代码，而非在规范之下自作聪明地使用自己偏好的风格。\"**\n> \n> -- _Idan Gazit_\n\n---\n## 翻译版本\n- [ORIGINAL](https://github.com/rwldrn/idiomatic.js/)\n- [German](https://github.com/rwldrn/idiomatic.js/tree/master/translations/de_DE)\n- [French](https://github.com/rwldrn/idiomatic.js/tree/master/translations/fr_FR)\n- [Spanish](https://github.com/rwldrn/idiomatic.js/tree/master/translations/es_ES)\n- [Portuguese - Brazil](https://github.com/rwldrn/idiomatic.js/tree/master/translations/pt_BR)\n- [Korean](https://github.com/rwldrn/idiomatic.js/tree/master/translations/ko_KR)\n- [Japanese](https://github.com/rwldrn/idiomatic.js/tree/master/translations/ja_JP)\n- [Italian](https://github.com/rwldrn/idiomatic.js/tree/master/translations/it_IT)\n- [Russian](https://github.com/rwldrn/idiomatic.js/tree/master/translations/ru_RU)\n- [Romanian](https://github.com/rwldrn/idiomatic.js/tree/master/translations/ro_RO)\n- [简体中文](https://github.com/rwldrn/idiomatic.js/tree/master/translations/zh_CN)\n- [Serbian - cyrilic alphabet](https://github.com/rwldrn/idiomatic.js/tree/master/translations/ср_СР)\n- [Serbian - latin aplphabet](https://github.com/rwldrn/idiomatic.js/tree/master/translations/sr_SR)\n## 重要，非常通用资源：\n### 代码质量工具、资源和文献\n- [JavaScript Plugin](http://docs.codehaus.org/display/SONAR/JavaScript+Plugin) for [Sonar](http://www.sonarsource.org/)\n- [jsPerf](http://jsperf.com/)\n- [jsFiddle](http://jsfiddle.net/)\n- [jsbin](http://jsbin.com/)\n- [JavaScript Lint (JSL)](http://javascriptlint.com/)\n- [jshint](http://jshint.com/)\n- [jslint](http://jslint.org/)\n## 变聪明点\n### [ECMAScript 5.1 注解版](http://es5.github.com/)\n### [EcmaScript 语言规范, 5.1 版](http://ecma-international.org/ecma-262/5.1/)\n\n下列文档的现实是：1）不完全版，2）_必读_。我并不全（不总是，always agree）赞同下列所有作者所写的风格，但有一点可以确定的是：他们具备一致性。除此之外，他们还都是这门语言的权威人士。\n- [Baseline For Front End Developers](http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/)\n- [Eloquent JavaScript](http://eloquentjavascript.net/)\n- [JavaScript, JavaScript](http://javascriptweblog.wordpress.com/)\n- [Adventures in JavaScript Development](http://rmurphey.com/)\n- [Perfection Kills](http://perfectionkills.com/)\n- [Douglas Crockford's Wrrrld Wide Web](http://www.crockford.com)\n- [JS Assessment](https://github.com/rmurphey/js-assessment)\n- [Leveraging Code Quality Tools by Anton Kovalyov](http://anton.kovalyov.net/slides/gothamjs/)\n### 编译和部署\n\n项目必须总是提供一些通用的方法来检验（can be linted）、测试和压缩源码以为产品阶段使用做准备。对于此类工作 Ben Alman 所写的 [grunt](https://github.com/cowboy/grunt) 可谓首屈一指，并已替代这个仓库的 “kits/” 目录作官方工具。\n### 测试工具\n\n项目 _必须_ 包括某此类型的单元、引用、实现或者功能性测试。使用代码示例并不足以称为“测试”。下面是一系列测试框架，他们只代表自己（谁都不是谁的更好替代品，which are endorsed more than the other）。\n- [QUnit](http://github.com/jquery/qunit)\n- [Jasmine](https://github.com/pivotal/jasmine)\n- [Vows](https://github.com/cloudhead/vows)\n- [Mocha](https://github.com/visionmedia/mocha)\n- [Hiro](http://hirojs.com/)\n- [JsTestDriver](https://code.google.com/p/js-test-driver/)\n- [Buster.js](http://busterjs.org/)\n- [Sinon.js](http://sinonjs.org/)\n## 目录\n- [Whitespace](#whitespace)\n- [Beautiful Syntax](#spacing)\n- [Type Checking (Courtesy jQuery Core Style Guidelines)](#type)\n- [Conditional Evaluation](#cond)\n- [Practical Style](#practical)\n- [Naming](#naming)\n- [Misc](#misc)\n- [Native & Host Objects](#native)\n- [Comments](#comments)\n- [One Language Code](#language)\n\n---\n## 前言\n\n下面的章节描述的是一个 _合理_ 的现代 JavaScript 开发风格指南，并非硬性规定。其想送出的核心理念是_高度统一的代码风格_（the law of code style consistency）。你为项目所择风格都应为最高准则。作为一个描述放置于你的项目中，并链接到这个文档作为代码风格一致性、可读性和可维护性的保证。\n## Idiomatic 风格宣言\n1. <a name=\"whitespace\">空白</a>\n   - 永远都不要混用\b空格和Tab。\n   - 开始一个项目，在写代码之前，选择软缩进（空格）或者 Tab（作为缩进方式），并将其作为**最高准则**。\n     - 为了可读, 我总是推荐在你的编辑中设计2个字母宽度的缩进 &mdash; 这等同于两个空格或者两个空格替代一个 Tab。\n   - 如果你的编辑器支持，请总是打开 “显示不可见字符” 这个设置。好处是：\n     - 保证一致性\n       - 去掉行末的空格\n       - 去掉空行的空格\n       - 提交和对比更具可读性\n2. <a name=\"spacing\">美化语法</a>\n   \n   **A. 小括号, 花括号, 换行**\n   \n   ``` javascript\n   \n       // if/else/for/while/try 通常都有小括号、花括号和多行\n       // 这有助于可读\n   \n       // 2.A.1.1\n       // 难辨语法（cramped syntax）的例子\n       if(condition) doSomething();\n       while(condition) iterating++;\n       for(var i=0;i<100;i++) someIterativeFn();\n   \n       // 2.A.1.1\n       // 使用空格来提升可读性\n       if (condition) {\n           // 语句\n       }\n       while (condition) {\n           // 语句\n       }\n       for (var i = 0; i < 100; i++) {\n           // 语句\n       }\n   \n       // 更好的做法:\n       var i,\n       length = 100;\n       for (i = 0; i < length; i++) {\n           // 语句\n       }\n   \n       // 或者...\n       var i = 0,\n           length = 100;\n       for (; i < length; i++) {\n           // 语句\n       }\n       var prop;\n       for (prop in object) {\n           // 语句\n       }\n       if (true) {\n           // 语句\n       } else {\n           // 语句\n       }\n   \n   ```\n   \n   **B. 赋值, 声明, 函数 ( 命名函数, 函数表达式, 构建函数 )**\n   \n   ``` javascript\n   \n       // 2.B.1.1\n       // 变量\n       var foo = \"bar\",\n           num = 1,\n           undef;\n   \n       // 字面量标识:\n       var array = [],\n           object = {};\n   \n       // 2.B.1.2\n       // 在一个作用域（函数）内只使用一个 `var` 有助于提升可读性\n       // 并且让你的声明列表变得有条不紊 (还帮你省了几次键盘敲击)\n   \n       // 不好\n       var foo = \"\";\n       var bar = \"\";\n       var qux;\n   \n       // 好\n       var foo = \"\",\n           bar = \"\",\n           quux;\n   \n       // 或者..\n       var // 对这些变量的注释\n       foo = \"\",\n           bar = \"\",\n           quux;\n   \n       // 2.B.1.3\n       // `var` 语句必须总是在各自作用域（函数）顶部\n       // 同样适应于来自 ECMAScript 6 的常量\n   \n       // 不好\n   \n       function foo() {\n   \n           // 在变量前有语句\n   \n           var bar = \"\",\n               qux;\n       }\n   \n       // 好\n   \n       function foo() {\n           var bar = \"\",\n            qux;\n   \n            // 所有语句都在变量之后\n       }\n   \n   ```\n   \n   ``` javascript\n   \n       // 2.B.2.1\n       // 命名函数声明\n   \n       function foo(arg1, argN) {\n   \n       }\n   \n       // 使用方法\n       foo(arg1, argN);\n   \n       // 2.B.2.2\n       // 命名函数声明\n   \n       function square(number) {\n           return number * number;\n       }\n   \n       // 使用方法\n       square(10);\n   \n       // 非常不自然的连带传参（continuation passing）风格\n   \n       function square(number, callback) {\n           callback(number * number);\n       }\n   \n       square(10, function(square) {\n           // 回调内容\n       });\n   \n       // 2.B.2.3\n       // 函数表达式\n       var square = function(number) {\n           // 返回有价值的、相关的内容\n           return number * number;\n       };\n   \n       // 带标识符的函数表达式\n       // 这种首选形式有附加的功能让其可以调用自身\n       // 并且在堆栈中有标识符\n       var factorial = function factorial(number) {\n           if (number < 2) {\n               return 1;\n           }\n   \n           return number * factorial(number - 1);\n       };\n   \n       // 2.B.2.4\n       // 构造函数声明\n   \n       function FooBar(options) {\n   \n           this.options = options;\n       }\n   \n       // 使用方法\n       var fooBar = new FooBar({\n           a: \"alpha\"\n       });\n   \n       fooBar.options;\n       // { a: \"alpha\" }\n   \n   \n   ```\n   \n   **C. 异常, 细节**\n   \n   ``` javascript\n   \n       // 2.C.1.1\n       // 带回调的函数\n       foo(function() {\n           // 注意：在第一函数调用的小括号和 `function` 处并没有空格\n       });\n   \n       // 函数接受 `array` 作为参数，没有空格\n       foo([\"alpha\", \"beta\"]);\n   \n       // 2.C.1.2\n       // 函数接受 `object` 作为参数，没有空格\n       foo({\n           a: \"alpha\",\n           b: \"beta\"\n       });\n   \n       // 函数接受 `string` 字面量作为参数，没有空格\n       foo(\"bar\");\n   \n       // 分组用的小括号内部，没有空格\n       if (!(\"foo\" in obj)) {\n   \n       }\n   \n   ```\n   \n   **D. 一致性（统一）总是笑到最后的（Consistency Always Wins）**\n   \n   在 2.A-2.C 节，留白作为一个推荐方式被提出，基于单纯的、更高的目的：统一。值得注意的是格式化偏好，像“内部留白”必须是可选的，但在整个项目的源码中必须只存在着一种。\n   \n   ``` javascript\n   \n       // 2.D.1.1\n   \n       if (condition) {\n           // 语句\n       }\n   \n       while (condition) {\n           // 语句\n       }\n   \n       for (var i = 0; i < 100; i++) {\n           // 语句\n       }\n   \n       if (true) {\n           // 语句\n       } else {\n           // 语句\n       }\n   ```\n   \n   **E. 引号**\n   \n   无论你选择单引号还是双引号都无所谓，在 JavaScript 中它们在解析上没有区别。而**绝对需要**强制的是一致性。 **永远不要在同一个项目中混用两种引号，选择一种，并保持一致**。\n   \n   **F. 行末和空行**\n   \n   留白会破坏区别并使用变更不可读。考虑包括一个预提交的 hook 自动删除行末和空行中的空格。\n3. <a name=\"type\">类型检测 (来源于 jQuery Core Style Guidelines)</a>\n   \n   **A. 直接类型（实际类型，Actual Types）**\n   \n   String:\n   \n   ```\n   typeof variable === \"string\"\n   ```\n   \n   Number:\n   \n   ```\n   typeof variable === \"number\"\n   ```\n   \n   Boolean:\n   \n   ```\n   typeof variable === \"boolean\"\n   ```\n   \n   Object:\n   \n   ```\n   typeof variable === \"object\"\n   ```\n   \n   Array:\n   \n   ```\n   Array.isArray( arrayLikeObject )\n   (如果可能的话)\n   ```\n   \n   Node:\n   \n   ```\n   elem.nodeType === 1\n   ```\n   \n   null:\n   \n   ```\n   variable === null\n   ```\n   \n   null or undefined:\n   \n   ```\n   variable == null\n   ```\n   \n   undefined:\n   \n   ```\n   全局变量:\n   \n   typeof variable === \"undefined\"\n   \n   局部变量:\n   \n   variable === undefined\n   \n   属性:\n   \n   object.prop === undefined\n   object.hasOwnProperty( prop )\n   \"prop\" in object\n   ```\n   \n   **B. 转换类型（强制类型，Coerced Types）**\n   \n   考虑下面这个的含义...\n   \n   给定的 HTML:\n   \n   ``` html\n   \n       <input type=\"text\" id=\"foo-input\" value=\"1\">\n   \n   ```\n   \n   ``` javascript\n   \n       // 3.B.1.1\n   \n       // `foo` 已经被赋予值 `0`，类型为 `number`\n       var foo = 0;\n   \n       // typeof foo;\n       // \"number\"\n   \n       // 在后续的代码中，你需要更新 `foo`，赋予在 input 元素中得到的新值\n   \n       foo = document.getElementById(\"foo-input\").value;\n   \n       // 如果你现在测试 `typeof foo`, 结果将是 `string`\n       // 这意味着你在 if 语句检测 `foo` 有类似于此的逻辑:\n   \n       if (foo === 1) {\n           importantTask();\n       }\n   \n       // `importantTask()` 将永远不会被执行，即使 `foo` 有一个值 \"1\"\n   \n       // 3.B.1.2\n   \n       // 你可以巧妙地使用 + / - 一元运算符强制转换类型以解决问题:\n   \n       foo = +document.getElementById(\"foo-input\").value;\n       //  ^ + 一元运算符将它右边的运算对象转换为 `number`\n   \n       // typeof foo;\n       // \"number\"\n   \n       if (foo === 1) {\n           importantTask();\n       }\n   \n       // `importantTask()` 将被调用\n   \n   ```\n   \n   对于强制类型转换这里有几个例子:\n   \n   ``` javascript\n   \n       // 3.B.2.1\n   \n       var number = 1,\n           string = \"1\",\n           bool = false;\n   \n       number;\n       // 1\n   \n       number + \"\";\n       // \"1\"\n   \n       string;\n       // \"1\"\n   \n       +\n       string;\n       // 1\n   \n       +\n       string++;\n       // 1\n   \n       string;\n       // 2\n   \n       bool;\n       // false\n   \n       +bool;\n       // 0\n   \n       bool + \"\";\n       // \"false\"\n   \n   ```\n   \n   ``` javascript\n       // 3.B.2.2\n   \n       var number = 1,\n           string = \"1\",\n           bool = true;\n   \n       string === number;\n       // false\n   \n       string === number + \"\";\n       // true\n   \n       +string === number;\n       // true\n   \n       bool === number;\n       // false\n   \n       +bool === number;\n       // true\n   \n       bool === string;\n       // false\n   \n       bool === !!string;\n       // true\n   ```\n   \n   ``` javascript\n       // 3.B.2.3\n   \n       var array = [ \"a\", \"b\", \"c\" ];\n   \n       !!~array.indexOf(\"a\");\n       // true\n   \n       !!~array.indexOf(\"b\");\n       // true\n   \n       !!~array.indexOf(\"c\");\n       // true\n   \n       !!~array.indexOf(\"d\");\n       // false\n   \n       // 值得注意的是上述都是 \"不必要的聪明\"\n       // 采用明确的方案来比较返回的值\n       // 如 indexOf：\n   \n       if ( array.indexOf( \"a\" ) >= 0 ) {\n           // ...\n       }\n   ```\n   \n   ``` javascript\n   \n       // 3.B.2.3\n   \n       var num = 2.5;\n       parseInt(num, 10);\n       // 等价于...\n       ~~num;\n       num >> 0;\n       num >>> 0;\n       // 结果都是 2\n       // 时刻牢记心底, 负值将被区别对待...\n       var neg = -2.5;\n       parseInt(neg, 10);\n       // 等价于...\n       ~~neg;\n       neg >> 0;\n       // 结果都是 -2\n       // 但是...\n       neg >>> 0;\n       // 结果即是 4294967294\n   \n   ```\n4. <a name=\"cond\">对比运算</a>\n   \n   ``` javascript\n   \n       // 4.1.1\n       // 当只是判断一个 array 是否有长度，相对于使用这个:\n       if ( array.length > 0 ) ...\n   \n       // ...判断真伪, 请使用这种:\n       if ( array.length ) ...\n   \n       // 4.1.2\n       // 当只是判断一个 array 是否为空，相对于使用这个:\n       if ( array.length === 0 ) ...\n   \n       // ...判断真伪, 请使用这种:\n       if ( !array.length ) ...\n   \n       // 4.1.3\n       // 当只是判断一个 string 是否为空，相对于使用这个:\n       if ( string !== \"\" ) ...\n   \n       // ...判断真伪, 请使用这种:\n       if ( string ) ...\n   \n       // 4.1.4\n       // 当只是判断一个 string 是为空，相对于使用这个:\n       if ( string === \"\" ) ...\n   \n       // ...判断真伪, 请使用这种:\n       if ( !string ) ...\n   \n       // 4.1.5\n       // 当只是判断一个引用是为真，相对于使用这个:\n       if ( foo === true ) ...\n   \n       // ...判断只需像你所想，享受内置功能的好处:\n       if ( foo ) ...\n   \n       // 4.1.6\n       // 当只是判断一个引用是为假，相对于使用这个:\n       if ( foo === false ) ...\n   \n       // ...使用叹号将其转换为真\n       if ( !foo ) ...\n   \n       // ...需要注意的是：这个将会匹配 0, \"\", null, undefined, NaN\n       // 如果你 _必须_ 是布尔类型的 false，请这样用：\n       if ( foo === false ) ...\n   \n       // 4.1.7\n       // 如果想计算一个引用可能是 null 或者 undefined，但并不是 false, \"\" 或者 0,\n       // 相对于使用这个：\n       if ( foo === null || foo === undefined ) ...\n   \n       // ...享受 == 类型强制转换的好处，像这样:\n       if ( foo == null ) ...\n   \n       // 谨记，使用 == 将会令 `null` 匹配 `null` 和 `undefined`\n       // 但不是 `false`，\"\" 或者 0\n       null == undefined\n   \n   ```\n   \n   总是判断最好、最精确的值，上述是指南而非教条。\n   \n   ``` javascript\n   \n       // 4.2.1\n       // 类型转换和对比运算说明\n   \n       // 首次 `===`，`==` 次之 (除非需要松散类型的对比)\n   \n       // `===` 总不做类型转换，这意味着:\n   \n       \"1\" === 1;\n       // false\n   \n       // `==` 会转换类型，这意味着:\n   \n       \"1\" == 1;\n       // true\n   \n       // 4.2.2\n       // 布尔, 真 & 伪\n   \n       // 布尔:\n       true, false\n   \n       // 真:\n       \"foo\", 1\n   \n       // 伪:\n       \"\", 0, null, undefined, NaN, void 0\n   \n   ```\n5. <a name=\"practical\">实用风格</a>\n   \n   ``` javascript\n   \n       // 5.1.1\n       // 一个实用的模块\n   \n       (function(global) {\n           var Module = (function() {\n               var data = \"secret\";\n               return {\n                   // 这是一个布尔值\n                   bool: true,\n                   // 一个字符串\n                   string: \"a string\",\n                   // 一个数组\n                   array: [1, 2, 3, 4],\n                   // 一个对象\n                   object: {\n                       lang: \"en-Us\"\n                   },\n                   getData: function() {\n                       // 得到 `data` 的值\n                       return data;\n                   },\n                   setData: function(value) {\n                       // 返回赋值过的 `data` 的值\n                       return (data = value);\n                   }\n               };\n           })();\n           // 其他一些将会出现在这里\n           // 把你的模块变成全局对象\n           global.Module = Module;\n       })(this);\n   \n   ```\n   \n   ``` javascript\n   \n       // 5.2.1\n       // 一个实用的构建函数\n   \n       (function(global) {\n           function Ctor(foo) {\n               this.foo = foo;\n               return this;\n           }\n           Ctor.prototype.getFoo = function() {\n               return this.foo;\n           };\n           Ctor.prototype.setFoo = function(val) {\n               return (this.foo = val);\n           };\n           // 不使用 `new` 来调用构建函数，你可能会这样做：\n           var ctor = function(foo) {\n               return new Ctor(foo);\n           };\n           // 把我们的构建函数变成全局对象\n           global.ctor = ctor;\n       })(this);\n   \n   ```\n6. <a name=\"naming\">命名</a>\n   \n   **A. 你并不是一个人肉 编译器/压缩器，所以尝试去变身为其一。**\n   \n   下面的代码是一个极糟命名的典范:\n   \n   ``` javascript\n   \n       // 6.A.1.1\n       // 糟糕命名的示例代码\n   \n       function q(s) {\n           return document.querySelectorAll(s);\n       }\n       var i,a=[],els=q(\"#foo\");\n       for(i=0;i<els.length;i++){a.push(els[i]);}\n   ```\n   \n   毫无疑问，你写过这样的代码 —— 希望从今天它不再出现。\n   \n   这里有一份相同逻辑的代码，但拥有更健壮、贴切的命名（和一个可读的结构）：\n   \n   ``` javascript\n   \n   // 6.A.2.1\n   // 改善过命名的示例代码\n   \n       function query(selector) {\n           return document.querySelectorAll(selector);\n       }\n   \n       var idx = 0,\n           elements = [],\n           matches = query(\"#foo\"),\n           length = matches.length;\n   \n       for (; idx < length; idx++) {\n           elements.push(matches[idx]);\n       }\n   \n   ```\n   \n   一些额外的命名提示：\n   \n   ``` javascript\n   \n       // 6.A.3.1\n       // 命名字符串\n   \n       `dog` 是一个 string\n   \n       // 6.A.3.2\n       // 命名 arrays\n   \n       `['dogs']` 是一个包含 `dog 字符串的 array\n   \n       // 6.A.3.3\n       // 命名函数、对象、实例，等\n   \n       camlCase; function 和 var 声明\n   \n       // 6.A.3.4\n       // 命名构建器、原型，等\n   \n       PascalCase; 构建函数\n   \n       // 6.A.3.5\n       // 命名正则表达式\n   \n       rDesc = //;\n   \n       // 6.A.3.6\n       // 来自 Google Closure Library Style Guide\n   \n       functionNamesLikeThis;\n       variableNamesLikeThis;\n       ConstructorNamesLikeThis;\n       EnumNamesLikeThis;\n       methodNamesLikeThis;\n       SYMBOLIC_CONSTANTS_LIKE_THIS;\n   \n   ```\n   \n   **B. 面对 `this`**\n   \n   除使用众所周知的 `call` 和 `apply` 外，总是优先选择 `.bind( this )` 或者一个功能上等价于它的。创建 `BoundFunction` 声明供后续调用，当没有更好的选择时才使用别名。\n   \n   ``` javascript\n       // 6.B.1\n   \n       function Device(opts) {\n           this.value = null;\n           // 新建一个异步的 stream，这个将被持续调用\n           stream.read(opts.path, function(data) {\n               // 使用 stream 返回 data 最新的值，更新实例的值\n               this.value = data;\n           }.bind(this));\n           // 控制事件触发的频率\n           setInterval(function() {\n               // 发出一个被控制的事件\n               this.emit(\"event\");\n           }.bind(this), opts.freq || 100);\n       }\n       // 假设我们已继承了事件发送器（EventEmitter） ;)\n   ```\n   \n   当不能运行时，等价于 `.bind` 的功能在多数现代 JavaScript 库中都有提供。\n   \n   ``` javascript\n       // 6.B.2\n   \n       // 示例：lodash/underscore，_.bind()\n       function Device(opts) {\n           this.value = null;\n           stream.read(opts.path, _.bind(function(data) {\n               this.value = data;\n           }, this));\n   \n           setInterval(_.bind(function() {\n               this.emit(\"event\");\n           }, this), opts.freq || 100);\n       }\n   \n       // 示例：jQuery.proxy\n   \n       function Device(opts) {\n           this.value = null;\n           stream.read(opts.path, jQuery.proxy(function(data) {\n               this.value = data;\n           }, this));\n   \n           setInterval(jQuery.proxy(function() {\n               this.emit(\"event\");\n           }, this), opts.freq || 100);\n       }\n   \n       // 示例：dojo.hitch\n       function Device(opts) {\n           this.value = null;\n           stream.read(opts.path, dojo.hitch(this, function(data) {\n               this.value = data;\n           }));\n           setInterval(dojo.hitch(this, function() {\n               this.emit(\"event\");\n           }), opts.freq || 100);\n       }\n   \n   ```\n   \n   提供一个候选，创建一个 `this` 的别名，以 `self` 作为标识符。这很有可能出 bug，应尽可能避免。\n   \n   ``` javascript\n   \n   // 6.B.3\n   \n   function Device( opts ) {\n       var self = this;\n   \n       this.value = null;\n   \n       stream.read( opts.path, function( data ) {\n   \n       self.value = data;\n   \n       });\n   \n       setInterval(function() {\n   \n       self.emit(\"event\");\n   \n       }, opts.freq || 100 );\n   }\n   \n   ```\n   \n   **C. 使用 `thisArg`**\n   \n   好几个 ES 5.1 中的原型的方法都内置了一个特殊的 `thisArg` 标记，尽可能多地使用它\n   \n   ``` javascript\n   \n       // 6.C.1\n   \n       var obj;\n       obj = {\n           f: \"foo\",\n           b: \"bar\",\n           q: \"qux\"\n       };\n       Object.keys(obj).forEach(function(key) {\n           // |this| 现在是 `obj`\n           console.log(this[key]);\n       }, obj); // <-- 最后的参数是 `thisArg`\n       // 打印出来...\n       // \"foo\"\n       // \"bar\"\n       // \"qux\"\n   \n   ```\n   \n   `thisArg` 在 `Array.prototype.every`、 `Array.prototype.forEach`、 `Array.prototype.some`、 `Array.prototype.map`、 `Array.prototype.filter` 中都可以使用。\n7. <a name=\"misc\">Misc</a>\n   \n   这个部分将要说明的想法和理念都并非教条。相反更鼓励对现存实践保持好奇，以尝试提供完成一般 JavaScript 编程任务的更好方案。\n   \n   **A. 避免使用 `switch`，现代方法跟踪（method tracing）将会把带有 switch 表达式的函数列为黑名单。**\n   \n   似乎在最新版本的 Firefox 和 Chrome 都对 `switch` 语句有重大改进。http://jsperf.com/switch-vs-object-literal-vs-module\n   \n   值得注意的是，改进可以这里看到:\n   https://github.com/rwldrn/idiomatic.js/issues/13\n   \n   ``` javascript\n       // 7.A.1.1\n       // switch 语句示例\n   \n       switch (foo) {\n           case \"alpha\":\n               alpha();\n               break;\n           case \"beta\":\n               beta();\n               break;\n           default:\n               // 默认分支\n               break;\n       }\n   \n       // 7.A.1.2\n       // 一个可支持组合、重用的方法是使用一个对象来存储 “cases”，\n       // 使用一个 function 来做委派：\n   \n       var cases, delegator;\n   \n       // 返回值仅作说明用\n       cases = {\n           alpha: function() {\n               // 语句\n               // 一个返回值\n               return [\"Alpha\", arguments.length];\n           },\n           beta: function() {\n               // 语句\n               // 一个返回值\n               return [\"Beta\", arguments.length];\n           },\n           _default: function() {\n               // 语句\n               // 一个返回值\n               return [\"Default\", arguments.length];\n           }\n       };\n   \n       delegator = function() {\n           var args, key, delegate;\n   \n           // 把 `argument` 转换成数组\n           args = [].slice.call(arguments);\n   \n           // 从 `argument` 中抽出最前一个值\n           key = args.shift();\n   \n           // 调用默认分支\n           delegate = cases._default;\n   \n           // 从对象中对方法进行委派操作\n           if (cases.hasOwnProperty(key)) {\n               delegate = cases[key];\n           }\n   \n           // arg 的作用域可以设置成特定值，\n           // 这种情况下，|null| 就可以了\n           return delegate.apply(null, args);\n       };\n   \n       // 7.A.1.3\n       // 使用 7.A.1.2 中的 API:\n   \n       delegator(\"alpha\", 1, 2, 3, 4, 5);\n       // [ \"Alpha\", 5 ]\n   \n       // 当然 `case` key 的值可以轻松地换成任意值\n   \n       var caseKey, someUserInput;\n   \n       // 有没有可能是某种形式的输入?\n       someUserInput = 9;\n   \n       if (someUserInput > 10) {\n           caseKey = \"alpha\";\n       } else {\n           caseKey = \"beta\";\n       }\n   \n       // 或者...\n   \n       caseKey = someUserInput > 10 ? \"alpha\" : \"beta\";\n   \n       // 然后...\n   \n       delegator(caseKey, someUserInput);\n       // [ \"Beta\", 1 ]\n   \n       // 当然还可以这样搞...\n   \n       delegator();\n       // [ \"Default\", 0 ]\n   \n   ```\n   \n   **B. 提前返回值提升代码的可读性并且没有太多性能上的差别**\n   \n   ``` javascript\n   \n       // 7.B.1.1\n       // 不好:\n   \n       function returnLate(foo) {\n           var ret;\n           if (foo) {\n               ret = \"foo\";\n           } else {\n               ret = \"quux\";\n           }\n           return ret;\n       }\n   \n       // 好:\n   \n       function returnEarly(foo) {\n   \n           if (foo) {\n               return \"foo\";\n           }\n           return \"quux\";\n       }\n   \n   ```\n8. <a name=\"native\">原生 & 宿主对象（注：其实一直觉得 Host Objects 真不应该翻译过来，这是就按一般书的写法翻出来吧）</a>\n   \n   最基本的原则是:\n   \n   **不要干任何蠢事，事情总会变好的**\n   \n   为了加强这个观念，请观看这个演示:\n   \n   **“一切都被允许: 原生扩展” by Andrew Dupont (JSConf2011, Portland, Oregon)**\n   \n   <iframe src=\"http://blip.tv/play/g_Mngr6LegI.html\" width=\"480\" height=\"346\" frameborder=\"0\" allowfullscreen></iframe><embed type=\"application/x-shockwave-flash\" src=\"http://a.blip.tv/api.swf#g_Mngr6LegI\" style=\"display:none\"></embed>\n   \n   [http://blip.tv/jsconf/jsconf2011-andrew-dupont-everything-is-permitted-extending-built-ins-5211542](http://blip.tv/jsconf/jsconf2011-andrew-dupont-everything-is-permitted-extending-built-ins-5211542)\n9. <a name=\"comments\">注释</a>\n   - 单行注释放于代码上方为首选\n   - 多行也可以\n   - 行末注释应被避免!\n   - JSDoc 的方式也不错，但需要比较多的时间\n10. <a name=\"language\">单用一门语言</a>\n    \n    无论是什么语言程序维护者（或团队）规定使用何种语言，程序都应只用同一种语言书写。\n## 附录\n### 前置逗号（Comma First）\n\n所有使用这个文档作为基本风格指南的项目都不允许前置逗号的代码格式，除非明确指定或者作者要求。\n\n**2013/5/10 23:18:10**\n"}}}