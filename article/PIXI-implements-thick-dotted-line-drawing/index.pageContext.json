{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"PIXI-implements-thick-dotted-line-drawing"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"PIXI实现粗虚线绘制","date":"!Date:2016-07-29T09:21:14.000Z","updated":"!Date:2016-07-29T09:23:04.000Z","id":"PIXI-implements-thick-dotted-line-drawing","createdAt":"!Date:2016-07-29T09:21:14.000Z","updatedAt":"!Date:2016-07-29T09:23:04.000Z","tags":[]},"htmlContent":"<p>好久没写博文，今天打卡。\n主题关于 canvas 虚线的绘制，或者说是一定路径的无限循环贴图的绘制，比如龙、蛇的身体绘制等等，网上都没有相关的实现，外国论坛也没有，所以索性就总结一下难点重点。</p>\n<p>这里是围绕 PIXI 的接口来实现。</p>\n<p>首先是准备的有：</p>\n<ol>\n<li>一条线的一组点</li>\n<li>要进行无限循环的贴图</li>\n</ol>\n<p>实现需要基于<a href=\"https://pixijs.github.io/docs/PIXI.mesh.Mesh.html\" target=\"_blank\">PIXI.mesh.Mesh</a>这个类来实现。\n需要传入的参数有：texture, vertices, uvs, indices。（drawMode 使用原本默认即可）</p>\n<ul>\n<li>texture 贴图对象 PIXI.Texutre</li>\n<li>vertices 顶点对象 Float32Array，默认是[0, 0, 100, 0, 100, 100, 0, 100]</li>\n<li>uvs 顶点贴图信息 Float32Array，0~1，代表贴图两个边缘，默认是[0, 0, 1, 0, 1, 1, 0, 1]</li>\n<li>indices 顶点顺序 Uint16Array，默认是[0，1，3，2]，代表一个长方形的绘制，那么会被绘制成两个三角形，分别是 0,1,2 和 1,3,2 。而这里的顶点顺序则拿去代表 vertices 数据的顺序，简单用程序表示那就是：<code>indices.map((v,i)=&gt;[ indices[i],indices[i+1],indices[i+2] ])</code>，有这个数据我们通常用来把重复点的数据合并成一个重复使用。</li>\n</ul>\n<h2>vertices 的获取</h2>\n<p>看这样一张图来说明 vertices, indices 这两个变量的默认值：</p>\n<p><img src=\"/img/pixi-dash-line/vertices-and-indices.png\" alt=\"Figure 1: vertices and indices\"></p>\n<p>如图，首先把 vertices 的数据中的顶点 4 个坐标点出，每两个数据为一组数据点 x,y，这里一共四个点。\n然后这四个点如何连成三角形？上面提到点的顺序必须是 0,1,2 然后 1,2,3。如果还有更多，那就是 2,3,4，如此下去，就形成三角网状结构。而 indices 参数就是用来指出这四个点的顺序。默认是[0，1，3，2]，那么就得到一下顺序：</p>\n<p><img src=\"/img/pixi-dash-line/connect-vertices.png\" alt=\"Figure:connect vertices\"></p>\n<p>而 uvs，则是指出这个点在贴图中的百分比，和 vertices 一样，没两个数据为一组数据点 x,y。</p>\n<p>所以根据这个规律，来实现贴图的无限循环。\n为了简单，我们这里将 indices 直接定为 0,1,2,3,4,5,6,7,8.....\n接下来会涉及到大量算法代码，我不贴出代码了，就说一下重点难点的思路：\n其中最重要的是线段加粗算法，比如下图的三个点所组成的线段：</p>\n<p><img src=\"/img/pixi-dash-line/point-to-segment.png\" alt=\"Figure:point to segment\"></p>\n<p>我们 可以很直接的得出这样的贴图顶点。\n这里推荐一种思路：点画圆：</p>\n<p><img src=\"/img/pixi-dash-line/circle-to-line.png\" alt=\"Figure:circle to line\"></p>\n<p>如图，除了首位两个点是取与相邻点的法线与圆的交点外，其余的点，取法如图所示，直接取两圆交点所在弧 间点，化成数学就是这样的算法：左右两点的法线所在线上取两点，这两点与中间点的距离相等</p>\n<p><img src=\"/img/pixi-dash-line/circle-to-line-math.png\" alt=\"Figure:circle to line\"></p>\n<blockquote>\n<p>不过我有一个不是很理解的问题，就是贴图交织的问题，不知道如何解决：如果遇到这种情况呢？</p>\n<p><img src=\"/img/pixi-dash-line/texture-mess-up.png\" alt=\"Figure:texture mess up\"></p>\n<p>图片估计看得很奇怪，奇怪就够了，因为贴图已经不是按照我想要的交织在一起，因为蛇、龙的身体在扭曲后，并不是后面的贴图把前面的覆盖了，而是把扭曲的部分合并在一起了。这里的问题就是这条线加粗后，如何正确的取到它两边的点。</p>\n</blockquote>\n<h2>uvs 的获取</h2>\n<p>说完 vertices 这个变量的取值方法，还有一个难点就是 uvs 的问题，uvs 取值 0~1，如何是我们需求提到的虚线、蛇、龙等，那么 y 方向的都是 0，1 即可。x 方向就变成要根据点与点的距离来手动计算了。\n要注意的是如果在从 0 递增到 1 后，接下来，要进行一次反转，然后才能从 0 再重新开始，如下面图：</p>\n<p><img src=\"/img/pixi-dash-line/vertices-order.png\" alt=\"Figure:vertices order\"></p>\n<p>如果不进行反转，那么就会发生 1,0 | 1,1 | 0,0 三个点画了一个三角形，这个三角形明显就是贴图镜像效果，如何避免，我们可以在 1,0 | 1,1 这两个点的坐标上面直接加上 0,0 | 1,0。效果就等于在看不到的地方直接进行了反转，避免镜像贴图的出现，如图：（PS：这里的重复点可以用 indices 来实现）</p>\n<p><img src=\"/img/pixi-dash-line/vertices-fixed-order.png\" alt=\"Figure:vertices fixed order\"></p>\n<p>还有一个问题就是补点的问题，两点之间的距离不一定，我们要保持贴图的比例，就要确保两 uvs 的值要和两点之间的距离来确定。当 uvs 累计到&gt;=1 的时候，就要在 uvs 为 1 的地方补点。如何实现我就不赘述了，实现不难。\n我这里讲一个另外一种脏方法，可以免去补点的问题。就是用 svg 的 path 对象，我们将线绘制到 path 对象上后调用接口就是 getPointAtLength(number)。贴图宽高知道的情况下，可以获取指定长度来取到对应的点的坐标。这样就免去补点的麻烦了。</p>\n<blockquote>\n<h2>实现线的光滑</h2>\n<p>既然用到了 svg，这里顺便贴出点光滑的实现代码：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> getAnchors</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p1x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p1y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p2x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p2y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p3x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">p3y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> is_turn </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p3x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1x) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    is_turn </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p2x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    l2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p3x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">atan</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((p2x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">abs</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1y)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    b </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">atan</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((p3x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">abs</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p3y));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">PI</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  b </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p3y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">PI</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">PI</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> /</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Math.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">PI</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dx1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sin</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dy1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">cos</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dx2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sin</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dy2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Math.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">cos</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    x1: p2x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dx1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> is_turn,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    y1: p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dy1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> is_turn,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    x2: p2x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dx2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> is_turn,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    y2: p2y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dy2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> is_turn,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pathNode </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> document.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">createElementNS</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"http://www.w3.org/2000/svg\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"path\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pathNode.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">setAttribute</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">  \"d\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  points</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">map</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">point</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">i</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">===</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \"M \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"C \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.y</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">else</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> points.</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre_point </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> points[i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nex_point </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> points[i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> getAnchors</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          pre_point.x,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          pre_point.y,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          point.x,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          point.y,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          nex_point.x,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          nex_point.y</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        );</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          a.x1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          a.y1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          point.x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          point.y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          a.x2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">          \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          a.y2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">        //最后一个点</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> point.y;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">join</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span></code></pre>\n</blockquote>\n","markdownContent":"\n好久没写博文，今天打卡。\n主题关于 canvas 虚线的绘制，或者说是一定路径的无限循环贴图的绘制，比如龙、蛇的身体绘制等等，网上都没有相关的实现，外国论坛也没有，所以索性就总结一下难点重点。\n\n这里是围绕 PIXI 的接口来实现。\n\n首先是准备的有：\n\n1. 一条线的一组点\n2. 要进行无限循环的贴图\n\n实现需要基于[PIXI.mesh.Mesh](https://pixijs.github.io/docs/PIXI.mesh.Mesh.html)这个类来实现。\n需要传入的参数有：texture, vertices, uvs, indices。（drawMode 使用原本默认即可）\n\n- texture 贴图对象 PIXI.Texutre\n- vertices 顶点对象 Float32Array，默认是[0, 0, 100, 0, 100, 100, 0, 100]\n- uvs 顶点贴图信息 Float32Array，0~1，代表贴图两个边缘，默认是[0, 0, 1, 0, 1, 1, 0, 1]\n- indices 顶点顺序 Uint16Array，默认是[0，1，3，2]，代表一个长方形的绘制，那么会被绘制成两个三角形，分别是 0,1,2 和 1,3,2 。而这里的顶点顺序则拿去代表 vertices 数据的顺序，简单用程序表示那就是：`indices.map((v,i)=>[ indices[i],indices[i+1],indices[i+2] ])`，有这个数据我们通常用来把重复点的数据合并成一个重复使用。\n\n## vertices 的获取\n\n看这样一张图来说明 vertices, indices 这两个变量的默认值：\n\n![Figure 1: vertices and indices](/img/pixi-dash-line/vertices-and-indices.png)\n\n如图，首先把 vertices 的数据中的顶点 4 个坐标点出，每两个数据为一组数据点 x,y，这里一共四个点。\n然后这四个点如何连成三角形？上面提到点的顺序必须是 0,1,2 然后 1,2,3。如果还有更多，那就是 2,3,4，如此下去，就形成三角网状结构。而 indices 参数就是用来指出这四个点的顺序。默认是[0，1，3，2]，那么就得到一下顺序：\n\n![Figure:connect vertices](/img/pixi-dash-line/connect-vertices.png)\n\n而 uvs，则是指出这个点在贴图中的百分比，和 vertices 一样，没两个数据为一组数据点 x,y。\n\n所以根据这个规律，来实现贴图的无限循环。\n为了简单，我们这里将 indices 直接定为 0,1,2,3,4,5,6,7,8.....\n接下来会涉及到大量算法代码，我不贴出代码了，就说一下重点难点的思路：\n其中最重要的是线段加粗算法，比如下图的三个点所组成的线段：\n\n![Figure:point to segment](/img/pixi-dash-line/point-to-segment.png)\n\n我们 可以很直接的得出这样的贴图顶点。\n这里推荐一种思路：点画圆：\n\n![Figure:circle to line](/img/pixi-dash-line/circle-to-line.png)\n\n如图，除了首位两个点是取与相邻点的法线与圆的交点外，其余的点，取法如图所示，直接取两圆交点所在弧 间点，化成数学就是这样的算法：左右两点的法线所在线上取两点，这两点与中间点的距离相等\n\n![Figure:circle to line](/img/pixi-dash-line/circle-to-line-math.png)\n\n> 不过我有一个不是很理解的问题，就是贴图交织的问题，不知道如何解决：如果遇到这种情况呢？\n>\n> ![Figure:texture mess up](/img/pixi-dash-line/texture-mess-up.png)\n>\n> 图片估计看得很奇怪，奇怪就够了，因为贴图已经不是按照我想要的交织在一起，因为蛇、龙的身体在扭曲后，并不是后面的贴图把前面的覆盖了，而是把扭曲的部分合并在一起了。这里的问题就是这条线加粗后，如何正确的取到它两边的点。\n\n## uvs 的获取\n\n说完 vertices 这个变量的取值方法，还有一个难点就是 uvs 的问题，uvs 取值 0~1，如何是我们需求提到的虚线、蛇、龙等，那么 y 方向的都是 0，1 即可。x 方向就变成要根据点与点的距离来手动计算了。\n要注意的是如果在从 0 递增到 1 后，接下来，要进行一次反转，然后才能从 0 再重新开始，如下面图：\n\n![Figure:vertices order](/img/pixi-dash-line/vertices-order.png)\n\n如果不进行反转，那么就会发生 1,0 | 1,1 | 0,0 三个点画了一个三角形，这个三角形明显就是贴图镜像效果，如何避免，我们可以在 1,0 | 1,1 这两个点的坐标上面直接加上 0,0 | 1,0。效果就等于在看不到的地方直接进行了反转，避免镜像贴图的出现，如图：（PS：这里的重复点可以用 indices 来实现）\n\n![Figure:vertices fixed order](/img/pixi-dash-line/vertices-fixed-order.png)\n\n还有一个问题就是补点的问题，两点之间的距离不一定，我们要保持贴图的比例，就要确保两 uvs 的值要和两点之间的距离来确定。当 uvs 累计到>=1 的时候，就要在 uvs 为 1 的地方补点。如何实现我就不赘述了，实现不难。\n我这里讲一个另外一种脏方法，可以免去补点的问题。就是用 svg 的 path 对象，我们将线绘制到 path 对象上后调用接口就是 getPointAtLength(number)。贴图宽高知道的情况下，可以获取指定长度来取到对应的点的坐标。这样就免去补点的麻烦了。\n\n> ## 实现线的光滑\n>\n> 既然用到了 svg，这里顺便贴出点光滑的实现代码：\n>\n> ```js\n> function getAnchors(p1x, p1y, p2x, p2y, p3x, p3y) {\n>   var is_turn = 1;\n>   if (p3x < p1x) {\n>     is_turn = -1;\n>   }\n>   var l1 = (p2x - p1x) / 2,\n>     l2 = (p3x - p2x) / 2,\n>     a = Math.atan((p2x - p1x) / Math.abs(p2y - p1y)),\n>     b = Math.atan((p3x - p2x) / Math.abs(p2y - p3y));\n>   a = p1y < p2y ? Math.PI - a : a;\n>   b = p3y < p2y ? Math.PI - b : b;\n>   var alpha = Math.PI / 2 - ((a + b) % (Math.PI * 2)) / 2,\n>     dx1 = l1 * Math.sin(alpha + a),\n>     dy1 = l1 * Math.cos(alpha + a),\n>     dx2 = l2 * Math.sin(alpha + b),\n>     dy2 = l2 * Math.cos(alpha + b);\n>   return {\n>     x1: p2x - dx1 * is_turn,\n>     y1: p2y + dy1 * is_turn,\n>     x2: p2x + dx2 * is_turn,\n>     y2: p2y + dy2 * is_turn,\n>   };\n> }\n> var pathNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n> pathNode.setAttribute(\n>   \"d\",\n>   points\n>     .map((point, i) => {\n>       if (i === 0) {\n>         return (\n>           \"M \" + point.x + \" \" + point.y + \"C \" + point.x + \" \" + point.y\n>         );\n>       } else if (i < points.length - 1) {\n>         var pre_point = points[i - 1];\n>         var nex_point = points[i + 1];\n>         var a = getAnchors(\n>           pre_point.x,\n>           pre_point.y,\n>           point.x,\n>           point.y,\n>           nex_point.x,\n>           nex_point.y\n>         );\n>         return (\n>           a.x1 +\n>           \" \" +\n>           a.y1 +\n>           \" \" +\n>           point.x +\n>           \" \" +\n>           point.y +\n>           \" \" +\n>           a.x2 +\n>           \" \" +\n>           a.y2\n>         );\n>       } else {\n>         //最后一个点\n>         return point.x + \" \" + point.y + \" \" + point.x + \" \" + point.y;\n>       }\n>     })\n>     .join(\" \")\n> );\n> ```\n"}}}