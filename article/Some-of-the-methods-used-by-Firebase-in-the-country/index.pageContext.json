{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"Some-of-the-methods-used-by-Firebase-in-the-country"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"Firebase在国内使用的一些方法","date":"!Date:2017-03-13T03:33:32.000Z","updated":"!Date:2017-08-02T09:25:34.000Z","id":"Some-of-the-methods-used-by-Firebase-in-the-country","createdAt":"!Date:2017-03-13T03:33:32.000Z","updatedAt":"!Date:2017-08-02T09:25:34.000Z","tags":[]},"htmlContent":"<p>Firebase在国内有些地区是可用的，但只是有些，没法保证全国通用，这篇文章谈的是服务端（Node.js）的使用。</p>\n<p>前提是电脑跑起来了代理软件，这个怎么搞我就不说了，代理服务器方面我建议用香港的代理服务器，那就很快很稳了。</p>\n<p>首先是Firebase-tool这个命令行工具，源码中使用的是request这个库，所以只要在源码里头加上<code>proxy</code>属性就行了。</p>\n<p>目前版本来说这个文件是<code>api.js</code>，找到<code>_request</code>这个函数，在里头加上一句：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  options.proxy </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"http://127.0.0.1:8118\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span></code></pre>\n<hr>\n<p>比较麻烦的是Firbase-admin这个库，用的是原生的http/https这两个核心的，核心服务都是走https的，所以这篇文章主要就谈一谈原生库如何走代理。我已经将这个库整理到<a href=\"https://github.com/Gaubee/firebase-admin-proxyable\" target=\"_blank\">firebase-admin-proxyable</a>这里了，国内用户可以安装这个并看着文档中DEMO的写法来配置自己的代理。</p>\n<ol>\n<li>\n<p>核心原理就是使用<a href=\"https://nodejs.org/api/http.html#http_class_http_agent\" target=\"_blank\">agent</a>这个属性，具体看官方文档。</p>\n</li>\n<li>\n<p>在npm里头，绝大多数的代理，核心都是这个库：<a href=\"https://www.npmjs.com/package/tunnel-agent\" target=\"_blank\">tunnel-agent</a>，点链接进去没文档，没关系，直接看源码，源码就单文件不到300行。</p>\n</li>\n<li>\n<p>然后推荐用<a href=\"https://www.npmjs.com/package/caw\" target=\"_blank\">caw</a>这个库。源码也是很简单的，读过觉得很靠谱，所以才在这里推荐使用。</p>\n</li>\n</ol>\n<p>以上就是相关的核心基本知识了。\n下面是实践：</p>\n<hr>\n<h3>第一步</h3>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> caw</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> require</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'caw'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> https</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> require</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"https\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">https.globalAgent </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> caw</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"http://127.0.0.1:8118\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tprotocol: </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'https'</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">});</span></span></code></pre>\n<p>设置全局代理，agent的只有在keep-alive的情况下才会自动触发，去使用globalAgent。</p>\n<blockquote>\n<p>注意，这里：<code>&quot;http://</code>这个代理的协议头不能少，看源码就知道为什么，因为源码很精简，没有去做那些不必要的智能判断，所以包括后面的<code>protocol: 'https'</code>也不能少，这点很重要。</p>\n</blockquote>\n<h3>第二步</h3>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> admin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> require</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"./firebase-admin\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span></code></pre>\n<p>要把node_modules里头的firebase-admin文件夹拿出来，改源码，当然你也可以手动去跟随维护一个走代理版本的库。</p>\n<h3>第三步</h3>\n<p>找到api-request.js文件中https请求的options的定义，添加以下属性。</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// firebase-admin\\lib\\utils\\api-request.js</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\"> |</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">  var</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> options </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |      method: httpMethod,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |      host: host,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |      port: port,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |      path: path,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |      headers: headers,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">+|      agent: https.globalAgent,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> |  };</span></span></code></pre>\n<p>找到credential.js文件中requestAccessToken函数，在函数头部添加以下代码</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// firebase-admin\\lib\\auth\\credential.js</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\"> |function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> requestAccessToken</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">transit</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">options</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">data</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">+|</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(transit </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">===</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> https){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">+|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        options.agent </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> https.globalAgent;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">+|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\"> |</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">function</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">reject</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span></code></pre>\n<hr>\n<p>2017-8-2补充：\n上面说的代理，是针对Google身份校验方面的代理。而在身份校验通过后，就是要开始用<code>wss</code>协议连接到服务器了，这点我补充一下如何配置：\n在源码中有这么一段：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-text\"><span class=\"line\"><span>0 == this.Wd.indexOf(\"wss://\") ? d.HTTPS_PROXY || d.https_proxy : d.HTTP_PROXY || d.http_proxy;</span></span></code></pre>\n<p>意思是，wss的代理走的不是nodejs的，而是自己的一套，默认从命令行的环境中获取代理参数，所以如果wss连接不稳定，需要走代理的话：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-text\"><span class=\"line\"><span>set https_proxy=http://127.0.0.1:8118</span></span></code></pre>\n<p>注意，这里头<code>http://</code>这个协议前缀一定要加。</p>\n","markdownContent":"\nFirebase在国内有些地区是可用的，但只是有些，没法保证全国通用，这篇文章谈的是服务端（Node.js）的使用。\n\n前提是电脑跑起来了代理软件，这个怎么搞我就不说了，代理服务器方面我建议用香港的代理服务器，那就很快很稳了。\n\n首先是Firebase-tool这个命令行工具，源码中使用的是request这个库，所以只要在源码里头加上`proxy`属性就行了。\n\n目前版本来说这个文件是`api.js`，找到`_request`这个函数，在里头加上一句：\n```js\n  options.proxy = \"http://127.0.0.1:8118\";\n```\n\n--------\n\n比较麻烦的是Firbase-admin这个库，用的是原生的http/https这两个核心的，核心服务都是走https的，所以这篇文章主要就谈一谈原生库如何走代理。我已经将这个库整理到[firebase-admin-proxyable](https://github.com/Gaubee/firebase-admin-proxyable)这里了，国内用户可以安装这个并看着文档中DEMO的写法来配置自己的代理。\n\n1. 核心原理就是使用[agent](https://nodejs.org/api/http.html#http_class_http_agent)这个属性，具体看官方文档。\n\n2. 在npm里头，绝大多数的代理，核心都是这个库：[tunnel-agent](https://www.npmjs.com/package/tunnel-agent)，点链接进去没文档，没关系，直接看源码，源码就单文件不到300行。\n\n3. 然后推荐用[caw](https://www.npmjs.com/package/caw)这个库。源码也是很简单的，读过觉得很靠谱，所以才在这里推荐使用。\n\n以上就是相关的核心基本知识了。\n下面是实践：\n\n-----\n\n### 第一步\n```js\nconst caw = require('caw');\n\nconst https = require(\"https\");\n\nhttps.globalAgent = caw(\"http://127.0.0.1:8118\", {\n\tprotocol: 'https'\n});\n```\n设置全局代理，agent的只有在keep-alive的情况下才会自动触发，去使用globalAgent。\n> 注意，这里：`\"http://`这个代理的协议头不能少，看源码就知道为什么，因为源码很精简，没有去做那些不必要的智能判断，所以包括后面的`protocol: 'https'`也不能少，这点很重要。\n\n### 第二步\n\n```js\nconst admin = require(\"./firebase-admin\");\n```\n要把node_modules里头的firebase-admin文件夹拿出来，改源码，当然你也可以手动去跟随维护一个走代理版本的库。\n\n### 第三步\n\n找到api-request.js文件中https请求的options的定义，添加以下属性。\n```js\n// firebase-admin\\lib\\utils\\api-request.js\n |  var options = {\n |      method: httpMethod,\n |      host: host,\n |      port: port,\n |      path: path,\n |      headers: headers,\n+|      agent: https.globalAgent,\n |  };\n```\n\n找到credential.js文件中requestAccessToken函数，在函数头部添加以下代码\n```js\n// firebase-admin\\lib\\auth\\credential.js\n |function requestAccessToken(transit, options, data) {\n+|    if(transit === https){\n+|        options.agent = https.globalAgent;\n+|    }\n |    return new Promise(function (resolve, reject) {\n```\n\n--------------\n\n2017-8-2补充：\n上面说的代理，是针对Google身份校验方面的代理。而在身份校验通过后，就是要开始用`wss`协议连接到服务器了，这点我补充一下如何配置：\n在源码中有这么一段：\n```\n0 == this.Wd.indexOf(\"wss://\") ? d.HTTPS_PROXY || d.https_proxy : d.HTTP_PROXY || d.http_proxy;\n```\n意思是，wss的代理走的不是nodejs的，而是自己的一套，默认从命令行的环境中获取代理参数，所以如果wss连接不稳定，需要走代理的话：\n```\nset https_proxy=http://127.0.0.1:8118\n```\n注意，这里头`http://`这个协议前缀一定要加。"}}}