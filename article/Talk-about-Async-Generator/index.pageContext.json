{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"Talk-about-Async-Generator"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"浅谈Async Generator","date":"!Date:2018-07-17T14:31:50.000Z","updated":"!Date:2018-07-18T08:15:59.000Z","tags":["javascript","cogitation"],"id":"Talk-about-Async-Generator","createdAt":"!Date:2018-07-17T14:31:50.000Z","updatedAt":"!Date:2018-07-18T08:15:59.000Z"},"htmlContent":"<p>会议初学编程的时候，那时候学的还是asp.net，然后看到substrack一个演讲视频：<a href=\"https://www.youtube.com/watch?v=lQAV3bPOYHo\" target=\"_blank\">Harnessing The Awesome Power Of Streams</a>，觉得：“哇！流这种编程思想我要学！”，从此就开始入了nodejs的坑。然而直到现在2018年，async iterator的出现，才勉勉强强提供了一种语法层级的流编程的体验。</p>\n<p>一开始，基于事件编程，开发者通过监听一个个事件（从<code>on(&quot;data&quot;, fn)</code>开始），来模拟事件流程。这勉强算是一种实现，它最大的问题是需要创建大量的callback，维护它的代价就是需要书写大量冗余的代码与抽象的封装才能勉强达到稳定可用的级别。\n事情的转机从Generator的出现开始，与其并行推广的还有提早一阵子出现的Promise。大部分人对Generator的使用无非就是<code>co</code>这个库的骚操作。不过确实，单纯Generator这个语法特性，很难在jser里头引起什么大风浪，毕竟js里头基本都是异步编程，Generator除了模拟现在的async/await以外很难有大舞台。</p>\n<h2>Async Generator</h2>\n<p>有趣的在async iterator这个语法出台，Generator才算正式杀入js的异步编程。</p>\n<h3>入门</h3>\n<p>举个简单的例子：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-js\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> stream</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fs.fs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">createReadStream</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'./big-file'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> stream){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>这种写法相比<code>on('data', fn)</code>这种写法，最大的区别在于资源的控制与利用上：基于事件的监听，nodejs会尽可能也必须尽可能快速地去触发<code>data</code>事件，而并不知道你到底有多么需要这些<code>data</code>，反正它就是冲着榨干硬件资源的操作去无脑触发就是了（当然你也可以直接使用文件句柄来手控操作，也能规避这个问题）。</p>\n<h3>进阶</h3>\n<p>再举一个实践的例子，我最近在做的节点扫描：从一个节点扫描出N个节点，然后再从这N个节点中扫描下一级的节点，不断收集，直到满足需求为止，伪代码如下：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Peer</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">origin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">level</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PeerService</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  peerList</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [{origin:</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'http://peer.com:777'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, level :</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> }]; </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 初始节点</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">searchPeers</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">    enter_port_peers</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.peerList, </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 初始的节点</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">    collection_peers</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Map</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Peer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>(), </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 节点去重用的表</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">    parallel_pool</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ParallelPool</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Peer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[]>(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">), </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 1. 并行池，可以同时执行2个任务</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  )</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AsyncIterableIterator</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Peer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> self</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// Generator function 无法与箭头函数混用，所以这里的this必须主动声明在外部。</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /*递归搜索代码片段*/</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> recursiveSearch</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> async</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> function*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">skip_when_no_full</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> boolean</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      for</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> peers</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> parallel_pool.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">yieldResults</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ignore_error: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 忽略错误（忽略不可用的节点）</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        skip_when_no_full, </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 在池子不填满的情况下是否返回</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      })) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> peer</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> peers) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">          yield</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> peer;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 3. 先返回节点，然后再递归搜索</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">          yield*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> self.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">searchPeers</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">([peer], collection_peers, parallel_pool);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> enter_port_peer</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> enter_port_peers) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      // 2. 向并行池中添加任务</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      parallel_pool.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">addTaskExecutor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">_searchPeers</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(enter_port_peer, collection_peers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      );</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      yield*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> recursiveSearch</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 如果并行池满了，等待一个任务完成后再继续填充</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    yield*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> recursiveSearch</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  private</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> async</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> _searchPeers</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">    enter_port_peer</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> typeof</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> PEERS</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">    collection_peers</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Map</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">string</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Peer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  ) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // TODO: 使用API获取与之相连的节点集合，并使用collection_peers去重</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">as</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Peer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>以上代码中有三个重点：\n1️⃣ 并行池的设计，是因为网络的数据请求应该尽可能预先加载，这里默认能同时有2数据请求在执行\n2️⃣ 我在一开始根据一个已知的节点表，把所有的下载任务尽肯能添加到池子中\n3️⃣ 每个任务返回的是一组节点，但以流的思想，拆解成一个个往外返回。外部拿到这个节点后，可以进行一些分析，比如试探这个节点是否正常，延迟多少等等。如果外部觉得节点够多了，这个生成器就不需要再执行下去。如果不够，那么就继续搜索下去。要注意的时候，在返回到外部的时候，因为我们使用了并行池的设计，所以理论上还有其它的一些网络请求任务也在执行。</p>\n<p>当然，有这个并行池的设计，你要把上面的代码改成基于事件触发的也不是不行。无非是多写点代码，多创建一些函数，通过代码拼接来完成整个AsyncIterator肯定也是可以的。async Generator只是提供给我们一种更加直观的写法与思考方式。</p>\n<h2>未来</h2>\n<p>语法特性的增加，最大的好处就是减少了错误的发生。\n这可能与其它一些语言的设计哲学并不相同，有的语言追求有且只有一种写法来实现需求。而js则是告诉你你这段代码还能简单+精简+可读+可维护+。\n按现有的提案，管道操作符<code>|&gt;</code>与函数部分执行<code>fn(1, ?)</code>这两个语法如果通过提案了，对于流编程也会带来很大的便利性。</p>\n","markdownContent":"\n会议初学编程的时候，那时候学的还是asp.net，然后看到substrack一个演讲视频：[Harnessing The Awesome Power Of Streams](https://www.youtube.com/watch?v=lQAV3bPOYHo)，觉得：“哇！流这种编程思想我要学！”，从此就开始入了nodejs的坑。然而直到现在2018年，async iterator的出现，才勉勉强强提供了一种语法层级的流编程的体验。\n\n一开始，基于事件编程，开发者通过监听一个个事件（从`on(\"data\", fn)`开始），来模拟事件流程。这勉强算是一种实现，它最大的问题是需要创建大量的callback，维护它的代价就是需要书写大量冗余的代码与抽象的封装才能勉强达到稳定可用的级别。\n事情的转机从Generator的出现开始，与其并行推广的还有提早一阵子出现的Promise。大部分人对Generator的使用无非就是`co`这个库的骚操作。不过确实，单纯Generator这个语法特性，很难在jser里头引起什么大风浪，毕竟js里头基本都是异步编程，Generator除了模拟现在的async/await以外很难有大舞台。\n\n## Async Generator\n\n有趣的在async iterator这个语法出台，Generator才算正式杀入js的异步编程。\n### 入门\n举个简单的例子：\n```js\nconst stream = fs.fs.createReadStream('./big-file');\nfor await(const data of stream){\n  console.log(data)\n}\n```\n这种写法相比`on('data', fn)`这种写法，最大的区别在于资源的控制与利用上：基于事件的监听，nodejs会尽可能也必须尽可能快速地去触发`data`事件，而并不知道你到底有多么需要这些`data`，反正它就是冲着榨干硬件资源的操作去无脑触发就是了（当然你也可以直接使用文件句柄来手控操作，也能规避这个问题）。\n\n### 进阶\n再举一个实践的例子，我最近在做的节点扫描：从一个节点扫描出N个节点，然后再从这N个节点中扫描下一级的节点，不断收集，直到满足需求为止，伪代码如下：\n```ts\ntype Peer = { origin:string; level: number };\nclass PeerService {\n  peerList = [{origin:'http://peer.com:777', level :1 }]; // 初始节点\n  async *searchPeers(\n    enter_port_peers = this.peerList, // 初始的节点\n    collection_peers = new Map<string, Peer>(), // 节点去重用的表\n    parallel_pool = new ParallelPool<Peer[]>(2), // 1. 并行池，可以同时执行2个任务\n  ): AsyncIterableIterator<Peer> {\n    const self = this; // Generator function 无法与箭头函数混用，所以这里的this必须主动声明在外部。\n    /*递归搜索代码片段*/\n    const recursiveSearch = async function*(skip_when_no_full?: boolean) {\n      for await (const peers of parallel_pool.yieldResults({\n        ignore_error: true, // 忽略错误（忽略不可用的节点）\n        skip_when_no_full, // 在池子不填满的情况下是否返回\n      })) {\n        for (const peer of peers) {\n          yield peer;// 3. 先返回节点，然后再递归搜索\n          yield* self.searchPeers([peer], collection_peers, parallel_pool);\n        }\n      }\n    };\n\n    for (const enter_port_peer of enter_port_peers) {\n      // 2. 向并行池中添加任务\n      parallel_pool.addTaskExecutor(() =>\n        this._searchPeers(enter_port_peer, collection_peers),\n      );\n      yield* recursiveSearch(true);// 如果并行池满了，等待一个任务完成后再继续填充\n    }\n    yield* recursiveSearch();\n  }\n  private async _searchPeers(\n    enter_port_peer: typeof PEERS[0],\n    collection_peers: Map<string, Peer>,\n  ) {\n    // TODO: 使用API获取与之相连的节点集合，并使用collection_peers去重\n   return [] as Peer[];\n  }\n}\n```\n以上代码中有三个重点：\n1️⃣ 并行池的设计，是因为网络的数据请求应该尽可能预先加载，这里默认能同时有2数据请求在执行\n2️⃣ 我在一开始根据一个已知的节点表，把所有的下载任务尽肯能添加到池子中\n3️⃣ 每个任务返回的是一组节点，但以流的思想，拆解成一个个往外返回。外部拿到这个节点后，可以进行一些分析，比如试探这个节点是否正常，延迟多少等等。如果外部觉得节点够多了，这个生成器就不需要再执行下去。如果不够，那么就继续搜索下去。要注意的时候，在返回到外部的时候，因为我们使用了并行池的设计，所以理论上还有其它的一些网络请求任务也在执行。\n\n当然，有这个并行池的设计，你要把上面的代码改成基于事件触发的也不是不行。无非是多写点代码，多创建一些函数，通过代码拼接来完成整个AsyncIterator肯定也是可以的。async Generator只是提供给我们一种更加直观的写法与思考方式。\n\n## 未来\n\n语法特性的增加，最大的好处就是减少了错误的发生。\n这可能与其它一些语言的设计哲学并不相同，有的语言追求有且只有一种写法来实现需求。而js则是告诉你你这段代码还能简单+精简+可读+可维护+。\n按现有的提案，管道操作符`|>`与函数部分执行`fn(1, ?)`这两个语法如果通过提案了，对于流编程也会带来很大的便利性。"}}}