{"abortReason":"!undefined","_urlRewrite":null,"_urlRedirect":"!undefined","abortStatusCode":"!undefined","_abortCall":"!undefined","_pageContextInitIsPassedToClient":"!undefined","pageId":"/pages/article/@id","routeParams":{"id":"Responsive-programming-based-on-AsyncIterator"},"data":{"article":{"metadata":{"layout":"layouts/article.njk","title":"基于AsyncIterator的响应式编程","date":"!Date:2022-04-18T08:19:46.754Z","updated":"!Date:2022-04-18T08:19:46.754Z","tags":["javascript","async","reactive"],"id":"Responsive-programming-based-on-AsyncIterator","createdAt":"!Date:2022-04-18T08:19:46.754Z","updatedAt":"!Date:2022-04-18T08:19:46.754Z"},"htmlContent":"<p>最近在重新思考响应式编程的一些事情，其实我很少使用 RxJS，往往是直接手撸各种异步策略。\n因为我自己是更加倾向于使用原生的 async-await/generaor 来实现。因为会有更好的调式支持，性能也会更好。但可维护性可能就不一定，如果没有好好封装，别人读代码的时候，就会比较晦涩。\n虽然 RxJS 在开始的时候也是晦涩，但是至少他们的高级的概念能够很好的复用。\n而像我这种直接手撸的就往往是按照需求来进行编程，阅读者如果对需求没有足够的理解，那这种代码的可维护性可以说是相对比较低的。</p>\n<p>但最近有打算把 RxJS 的一些常见概念和我自己的经验结合起来，写一个基于异步迭代器的响应式编程的库。\n这篇文章就简单的讲一下这个库里头涉及到的一些有趣的经验点。</p>\n<p>首先就是我异步编程时最常使用的 PromiseOut，它是对 promise 的再封装</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  resolve</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Function</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  reject</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Function</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  promise</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>((</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">reject</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.resolve </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> resolve;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.reject </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> reject;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<blockquote>\n<p>这是一个缩略版的 PromiseOut 代码，完整版的代码过段时间会放出来。（我司开源的相关工作还是推进中，主要是在做一个 typescript 项目管理标准，替代 monorepo……）</p>\n</blockquote>\n<p>它的用法自然也很简单，就是把 Promise 的控制器对外暴露：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> po</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">void</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> po.promise;</span></span></code></pre>\n<p>接着我们正式来聊聊异步迭代器与响应式编程。\n不知道大家记不记得，现在 nodejs/web，对于<code>socket.on(&quot;data&quot;)</code>这种有了一种新的写法：\n<code>for await(const chunk of socket)</code>。\n这里我们就实现一个简易版的，来看这段代码：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/**</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 订阅器</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 提供一个流式的变更触发</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 等价于 EventEmitter</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 这里提供基于流式编程的书写方法</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Sub</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   * 如果是 true，说明已经发生修改，只是这个改变还没有被拾取</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   * 如果是 false，说明改变已经被拾取</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   * 如果是 PromiseOut，说明有控制器在等待它</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   */</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">  changed</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> boolean</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">void</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Demo</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  private</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> _subs</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Set</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sub</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  /*触发修改*/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  emitChanged</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      // 如果有等待中的控制器，那么唤醒它</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sub.changed.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">resolve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      // 修改状态值：有改变</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   * 执行订阅</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { changed: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">add</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    do</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      /// 如果是 true 那么就重置成 false</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">===</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        yield</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/// 异步迭代器暂停，将控制权转交给外部迭代者</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      /// 暂停期间可能会被修改成 true（调用了emitChanged）</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      /// 如果还是 false，说明期间没有发生任何修改</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">===</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 创建一个控制器并等待它被唤醒</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">void</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>()).promise;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>现在代码的核心逻辑就是以上这些了，但那段代码是不完整的，因为很明显，<code>Demo._subs: Set&lt;Sub&gt;</code>这个对象只有<code>add</code>，没有<code>delete</code>，所以需要再加上内存释放的逻辑才够完整。</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { changed: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">add</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">try</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  do</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* 核心代码 */</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">} </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">finally</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">delete</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>不熟悉 AsyncGenerator 的人可能会觉得奇怪，那“核心代码”里头根本没有<code>break</code>、<code>return</code>等关键字，那<code>do-while(true)</code>能跑出来吗？\n答案是：能，你可以将<code>yield</code>的关键字理解成是注入外部的代码，类似于函数调用。同时，外部还能有两个特殊的控制函数：<code>asyncGenerator.return</code>和<code>asyncGenerator.throw</code>。所以只要外部调用了<code>asyncGenerator.return</code>，那么<code>finally</code>块的代码就能被执行。\n比如这段代码：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> changed</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> demo.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    throw</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    break</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>在我们最常用的<code>for-await</code>循环中，只要退出了循环，不论是用<code>break</code>、<code>throw</code>、<code>return</code>，都会触发<code>asyncGenerator.return</code>；</p>\n<p>好了，至此你觉得上面这段代码完事了吗？\n答案是：没有。\n看这句代码：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 创建一个控制器并等待它被唤醒</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">void</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>())).promise;</span></span></code></pre>\n<p>这个 promise 如果一直没有处于 pending 状态，那么<code>asyncGenerator.return</code>或者<code>asyncGenerator.throw</code>并不会无缘无故地将之释放掉。\n也就是说<code>finally</code>的代码一定要等到下一次<code>emitChanged</code>触发的时候，<code>promiseOut</code>被<code>resolved</code>，之后还要再次进入循环，执行到<code>yield</code>字段这里跳出来。同时被<code>for-await</code>这时候才会真的跳出来\n以下这段代码可以简单复现这个问题：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"start\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 一秒后执行 emitChanged</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">setTimeout</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  demo.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emitChanged</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> await</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> _</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> of</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> demo.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  break</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 执行 asyncGenerator.return，但不会马上跳出循环</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 等待一秒后，这句日志才会被打印</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"demo._subs.size\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, demo._subs.size);</span></span></code></pre>\n<p>所以要怎么解决这个问题呢？很简单，我们需要重写<code>asyncGenerator.return</code>函数：</p>\n<pre class=\"shiki shiki-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">/**</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 一个特殊的中断信号</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> ABORT_SIGNAL</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Symbol</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"abort-signal\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Demo</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  private</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> async</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">_subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Sub</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">add</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    try</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">      /* 核心代码 */</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">catch</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (err </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> ABORT_SIGNAL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        throw</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> err;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">finally</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">      this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">._subs.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">delete</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /*将原有的subscription方法改成私有，且sub对象由外部传入*/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Sub</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { changed: </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> subject</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">_subscription</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sub);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /// 重写 return 函数，确保能够直接地释放掉这个订阅</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> _return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> subject.return;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    subject.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">arg</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sub.changed.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">reject</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">ABORT_SIGNAL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _return.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">call</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(subject, arg);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /// 同样的，需要重写 throw 函数</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> _throw</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> subject.throw;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    subject.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">throw</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">err</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sub.changed </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PromiseOut</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sub.changed.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">reject</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(err);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _throw.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">call</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(subject, err);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> subject;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre>\n<p>至此，基于<code>AsyncGenerator</code>的这个事件流就基本开发完成了。\n如果你已经能理解以上的代码，那么接下来需要进阶的，其实就是<code>ReadableStream</code>，它同样提供了一个控制器，来用更加统一的方式易懂来实现以上代码中<code>PromiseOut</code>的作用。同时它还有背压的功能，这对于传统的基于事件驱动编程在程序的健壮性上是一个质变的存在，正如<code>try-catch</code>对于错误处理的重要性一样。这篇文章就不对此展开描述了。</p>\n","markdownContent":"\n最近在重新思考响应式编程的一些事情，其实我很少使用 RxJS，往往是直接手撸各种异步策略。\n因为我自己是更加倾向于使用原生的 async-await/generaor 来实现。因为会有更好的调式支持，性能也会更好。但可维护性可能就不一定，如果没有好好封装，别人读代码的时候，就会比较晦涩。\n虽然 RxJS 在开始的时候也是晦涩，但是至少他们的高级的概念能够很好的复用。\n而像我这种直接手撸的就往往是按照需求来进行编程，阅读者如果对需求没有足够的理解，那这种代码的可维护性可以说是相对比较低的。\n\n但最近有打算把 RxJS 的一些常见概念和我自己的经验结合起来，写一个基于异步迭代器的响应式编程的库。\n这篇文章就简单的讲一下这个库里头涉及到的一些有趣的经验点。\n\n首先就是我异步编程时最常使用的 PromiseOut，它是对 promise 的再封装\n\n```ts\nclass PromiseOut<T> {\n  resolve: Function;\n  reject: Function;\n  promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n}\n```\n\n> 这是一个缩略版的 PromiseOut 代码，完整版的代码过段时间会放出来。（我司开源的相关工作还是推进中，主要是在做一个 typescript 项目管理标准，替代 monorepo……）\n\n它的用法自然也很简单，就是把 Promise 的控制器对外暴露：\n\n```ts\nconst po = new PromiseOut<void>();\nawait po.promise;\n```\n\n接着我们正式来聊聊异步迭代器与响应式编程。\n不知道大家记不记得，现在 nodejs/web，对于`socket.on(\"data\")`这种有了一种新的写法：\n`for await(const chunk of socket)`。\n这里我们就实现一个简易版的，来看这段代码：\n\n```ts\n/**\n * 订阅器\n * 提供一个流式的变更触发\n * 等价于 EventEmitter\n * 这里提供基于流式编程的书写方法\n */\ninterface Sub {\n  /**\n   * 如果是 true，说明已经发生修改，只是这个改变还没有被拾取\n   * 如果是 false，说明改变已经被拾取\n   * 如果是 PromiseOut，说明有控制器在等待它\n   */\n  changed: boolean | PromiseOut<void>;\n}\nclass Demo {\n  private _subs = new Set<Sub>();\n  /*触发修改*/\n  emitChanged() {\n    for (const sub of this._subs) {\n      // 如果有等待中的控制器，那么唤醒它\n      if (sub.changed instanceof PromiseOut) {\n        sub.changed.resolve();\n      }\n      // 修改状态值：有改变\n      sub.changed = true;\n    }\n  }\n  /**\n   * 执行订阅\n   */\n  async *subscription() {\n    const sub: Sub = { changed: false };\n    this._subs.add(sub);\n    do {\n      /// 如果是 true 那么就重置成 false\n      if (sub.changed === true) {\n        sub.changed = false;\n        yield; /// 异步迭代器暂停，将控制权转交给外部迭代者\n      }\n      /// 暂停期间可能会被修改成 true（调用了emitChanged）\n      /// 如果还是 false，说明期间没有发生任何修改\n      if (sub.changed === false) {\n        // 创建一个控制器并等待它被唤醒\n        await (sub.changed = new PromiseOut<void>()).promise;\n        sub.changed = true;\n      }\n    } while (true);\n  }\n}\n```\n\n现在代码的核心逻辑就是以上这些了，但那段代码是不完整的，因为很明显，`Demo._subs: Set<Sub>`这个对象只有`add`，没有`delete`，所以需要再加上内存释放的逻辑才够完整。\n\n```ts\nconst sub = { changed: false };\nthis._subs.add(sub);\ntry {\n  do {\n    /* 核心代码 */\n  } while (true);\n} finally {\n  this._subs.delete(sub);\n}\n```\n\n不熟悉 AsyncGenerator 的人可能会觉得奇怪，那“核心代码”里头根本没有`break`、`return`等关键字，那`do-while(true)`能跑出来吗？\n答案是：能，你可以将`yield`的关键字理解成是注入外部的代码，类似于函数调用。同时，外部还能有两个特殊的控制函数：`asyncGenerator.return`和`asyncGenerator.throw`。所以只要外部调用了`asyncGenerator.return`，那么`finally`块的代码就能被执行。\n比如这段代码：\n\n```ts\nfor await (const changed of demo.subscription()) {\n    throw;\n    break;\n    return;\n}\n```\n\n在我们最常用的`for-await`循环中，只要退出了循环，不论是用`break`、`throw`、`return`，都会触发`asyncGenerator.return`；\n\n好了，至此你觉得上面这段代码完事了吗？\n答案是：没有。\n看这句代码：\n\n```ts\n// 创建一个控制器并等待它被唤醒\nawait((sub.changed = new PromiseOut<void>())).promise;\n```\n\n这个 promise 如果一直没有处于 pending 状态，那么`asyncGenerator.return`或者`asyncGenerator.throw`并不会无缘无故地将之释放掉。\n也就是说`finally`的代码一定要等到下一次`emitChanged`触发的时候，`promiseOut`被`resolved`，之后还要再次进入循环，执行到`yield`字段这里跳出来。同时被`for-await`这时候才会真的跳出来\n以下这段代码可以简单复现这个问题：\n\n```ts\nconsole.log(\"start\");\n// 一秒后执行 emitChanged\nsetTimeout(() => {\n  demo.emitChanged();\n}, 1000);\nfor await (const _ of demo.subscription()) {\n  break; // 执行 asyncGenerator.return，但不会马上跳出循环\n}\n// 等待一秒后，这句日志才会被打印\nconsole.log(\"demo._subs.size\", demo._subs.size);\n```\n\n所以要怎么解决这个问题呢？很简单，我们需要重写`asyncGenerator.return`函数：\n\n```ts\n/**\n * 一个特殊的中断信号\n */\nconst ABORT_SIGNAL = Symbol(\"abort-signal\");\nclass Demo {\n  private async *_subscription(sub: Sub) {\n    this._subs.add(sub);\n    try {\n      /* 核心代码 */\n    } catch (err) {\n      if (err !== ABORT_SIGNAL) {\n        throw err;\n      }\n    } finally {\n      this._subs.delete(sub);\n    }\n    /*将原有的subscription方法改成私有，且sub对象由外部传入*/\n  }\n  subscription() {\n    const sub: Sub = { changed: false };\n    const subject = this._subscription(sub);\n    /// 重写 return 函数，确保能够直接地释放掉这个订阅\n    const _return = subject.return;\n    subject.return = (arg: any) => {\n      if (sub.changed instanceof PromiseOut) {\n        sub.changed.reject(ABORT_SIGNAL);\n      }\n      return _return.call(subject, arg);\n    };\n    /// 同样的，需要重写 throw 函数\n    const _throw = subject.throw;\n    subject.throw = (err: any) => {\n      if (sub.changed instanceof PromiseOut) {\n        sub.changed.reject(err);\n      }\n      return _throw.call(subject, err);\n    };\n    return subject;\n  }\n}\n```\n\n至此，基于`AsyncGenerator`的这个事件流就基本开发完成了。\n如果你已经能理解以上的代码，那么接下来需要进阶的，其实就是`ReadableStream`，它同样提供了一个控制器，来用更加统一的方式易懂来实现以上代码中`PromiseOut`的作用。同时它还有背压的功能，这对于传统的基于事件驱动编程在程序的健壮性上是一个质变的存在，正如`try-catch`对于错误处理的重要性一样。这篇文章就不对此展开描述了。\n"}}}