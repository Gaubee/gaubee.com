---
import { getCollection } from "astro:content";
import TableOfContents from "./TableOfContents.astro";
import type { MarkdownHeading } from "astro";
import { Button } from "@/components/ui/button";

interface Props {
  headings?: MarkdownHeading[];
  tags?: string[];
}

const { headings, tags } = Astro.props;

const articles = await getCollection("articles");
const events = await getCollection("events");
const allPosts = [...articles, ...events].sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
);

const postsByMonth = allPosts.reduce(
  (acc, post) => {
    const year = post.data.date.getFullYear();
    const month = (post.data.date.getMonth() + 1).toString().padStart(2, "0");
    const key = `${year}-${month}`;
    if (!acc[key]) {
      acc[key] = 0;
    }
    acc[key]++;
    return acc;
  },
  {} as Record<string, number>,
);
---

<div class="flex flex-col gap-8">
  {headings && headings.length > 0 && <TableOfContents headings={headings} />}

  {
    tags && (
      <>
        <div class="tags-module">
          <h3 class="mb-4 text-lg font-bold">标签</h3>
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              <a href={`/tags/${tag}`}>
                <Button variant="outline">{tag}</Button>
              </a>
            ))}
          </div>
        </div>

        <div class="archive-module">
          <h3 class="mb-4 text-lg font-bold">归档</h3>
          <div class="flex flex-col gap-2">
            {Object.entries(postsByMonth).map(([month, count]) => {
              const [year, monthNum] = month.split("-");
              const link = `/archive/${year}/${monthNum}`;
              return (
                <a href={link}>
                  <Button variant="ghost" className="w-full justify-start">
                    {year}年{monthNum}月 ({count})
                  </Button>
                </a>
              );
            })}
          </div>
        </div>
      </>
    )
  }
</div>
