---
import { getCollection } from 'astro:content';

export interface Props {
    tags: string[];
}

const { tags = [] } = Astro.props;

const articles = await getCollection('articles');
const events = await getCollection('events');
const allPosts = [...articles, ...events].sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

const postsByMonth = allPosts.reduce((acc, post) => {
    const year = post.data.date.getFullYear();
    const month = (post.data.date.getMonth() + 1).toString().padStart(2, '0');
    const key = `${year}-${month}`;
    if (!acc[key]) {
        acc[key] = 0;
    }
    acc[key]++;
    return acc;
}, {} as Record<string, number>);
---
<div class="sidebar-container">
    <div class="search-module">
        <input type="search" placeholder="搜索..." />
    </div>

    {tags.length > 0 && (
        <div class="tags-module">
            <h3>标签</h3>
            <div class="tag-list">
                {tags.map(tag => {
                    const link = `/tags/${tag}.html`;
                    return (
                        <a href={link} class="tag-item">
                            {tag}
                        </a>
                    );
                })}
            </div>
        </div>
    )}

    {Object.keys(postsByMonth).length > 0 && (
        <div class="archive-module">
            <h3>归档</h3>
            <div class="archive-list">
                {Object.entries(postsByMonth).map(([month, count]) => {
                    const [year, monthNum] = month.split('-');
                    const link = `/archive/${year}/${monthNum}`;
                    return (
                        <a href={link} class="archive-item">
                            {year}年{monthNum}月 ({count})
                        </a>
                    );
                })}
            </div>
        </div>
    )}
</div>

<style>
    .sidebar-container {
        padding: 1rem;
        background-color: #ffffff;
        border-radius: 0.5rem;
        border: 1px solid var(--c-border);
    }
    .search-module input {
        width: 100%;
        padding: 0.75rem;
        border-radius: 999px;
        border: 1px solid var(--c-border);
        font-size: 1rem;
        box-sizing: border-box;
    }
    .tags-module {
        margin-top: 1.5rem;
    }
    h3 {
        margin-top: 0;
        font-size: 1.25rem;
    }
    .tag-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.75rem;
    }
    .tag-item {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        background-color: #f0f0f0;
        border-radius: 0.25rem;
        text-decoration: none;
        color: var(--c-text);
        font-size: 0.875rem;
        transition: background-color 0.2s ease-in-out;
    }
    .tag-item:hover {
        background-color: #e0e0e0;
    }

    .archive-module {
        margin-top: 1.5rem;
    }

    .archive-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 0.75rem;
    }

    .archive-item {
        text-decoration: none;
        color: var(--c-text);
        font-size: 0.95rem;
    }

    .archive-item:hover {
        text-decoration: underline;
    }
</style>
